# generated by datamodel-codegen:
#   filename:  openapi.yaml

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional
from uuid import UUID

from pydantic import AnyUrl, BaseModel, ConfigDict, EmailStr, Field, RootModel, confloat, conint


class UUIDModel(RootModel[UUID]):
    """Canonical UUID identifier wrapper."""

    root: UUID = Field(..., description='Canonical UUID identifier.')


class ProviderId(Enum):
    espn = 'espn'
    yahoo = 'yahoo'
    sleeper = 'sleeper'
    nfl = 'nfl'


class ScopeId(Enum):
    leagues = 'leagues'
    teams = 'teams'
    lineups = 'lineups'
    projections = 'projections'
    waivers = 'waivers'
    trades = 'trades'
    players = 'players'
    live = 'live'


class Error(BaseModel):
    model_config = ConfigDict(extra='forbid')

    code: str
    message: str
    details: Optional[Dict[str, Any]] = None


class ErrorResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    error: Error


class Provenance(BaseModel):
    model_config = ConfigDict(extra='forbid')

    source: str = Field(..., description='Data source or model name.')
    asOf: datetime = Field(..., description='Timestamp the data was computed.')
    modelVersion: Optional[str] = Field(
        None, description='Optional model or dataset version.'
    )
    notes: Optional[List[str]] = None


class Status(Enum):
    active = 'active'
    questionable = 'questionable'
    doubtful = 'doubtful'
    out = 'out'
    ir = 'ir'
    suspended = 'suspended'


class InjuryStatus(BaseModel):
    model_config = ConfigDict(extra='forbid')

    status: Status
    designation: Optional[str] = None
    updatedAt: datetime
    notes: Optional[str] = None


class PlayerSummary(BaseModel):
    model_config = ConfigDict(extra='forbid')

    playerId: UUID
    gsisId: Optional[str] = None
    fullName: str
    position: str
    team: str
    byeWeek: Optional[conint(ge=1, le=18)] = None
    age: Optional[conint(ge=18)] = None
    injury: Optional[InjuryStatus] = None
    provenance: Optional[Provenance] = None


class ProjectionSummary(BaseModel):
    model_config = ConfigDict(extra='forbid')

    meanPoints: float
    p20: float
    p50: float
    p80: float
    boomProbability: confloat(ge=0.0, le=1.0)
    bustProbability: confloat(ge=0.0, le=1.0)
    floorPoints: Optional[float] = None
    ceilingPoints: Optional[float] = None
    provenance: Optional[Provenance] = None


class Status1(Enum):
    linked = 'linked'
    pending = 'pending'
    error = 'error'


class LinkedAccount(BaseModel):
    model_config = ConfigDict(extra='forbid')

    provider: ProviderId
    status: Status1
    scopes: List[str]
    linkedAt: datetime
    lastSyncAt: Optional[datetime] = None
    needsReauth: bool
    errorCode: Optional[str] = None
    errorMessage: Optional[str] = None


class Preferences(BaseModel):
    model_config = ConfigDict(extra='forbid')

    defaultLeagueId: Optional[UUIDModel] = None
    defaultView: Optional[str] = None
    notificationOptIn: Optional[bool] = None


class UserProfile(BaseModel):
    model_config = ConfigDict(extra='forbid')

    userId: UUIDModel
    email: EmailStr
    createdAt: datetime
    displayName: Optional[str] = None
    accounts: List[LinkedAccount]
    activeLeagueIds: List[UUIDModel]
    preferences: Optional[Preferences] = None
    featureFlags: Optional[List[str]] = None


class AccountLinkRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    redirectUri: Optional[AnyUrl] = None
    scopes: Optional[List[str]] = None


class CodeChallengeMethod(Enum):
    S256 = 'S256'


class Pkce(BaseModel):
    model_config = ConfigDict(extra='forbid')

    codeChallenge: str
    codeChallengeMethod: CodeChallengeMethod


class AccountLinkResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    provider: ProviderId
    authorizationUrl: AnyUrl
    state: str
    expiresAt: datetime
    pkce: Optional[Pkce] = None


class OAuthCallbackResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    provider: ProviderId
    status: Status1
    linkedAccount: Optional[LinkedAccount] = None
    redirect: Optional[AnyUrl] = None
    message: Optional[str] = None


class Record(BaseModel):
    model_config = ConfigDict(extra='forbid')

    wins: conint(ge=0)
    losses: conint(ge=0)
    ties: conint(ge=0)


class TeamReference(BaseModel):
    model_config = ConfigDict(extra='forbid')

    teamId: UUID
    leagueId: UUID
    name: str
    abbreviation: Optional[str] = None
    manager: Optional[str] = None
    record: Optional[Record] = None


class TeamStanding(BaseModel):
    model_config = ConfigDict(extra='forbid')

    team: TeamReference
    rank: conint(ge=1)
    pointsFor: float
    pointsAgainst: float
    streak: Optional[str] = None
    notes: Optional[str] = None


class RosterSlotRule(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    count: conint(ge=0)


class Status3(Enum):
    preseason = 'preseason'
    in_season = 'in-season'
    completed = 'completed'


class LeagueSummary(BaseModel):
    model_config = ConfigDict(extra='forbid')

    leagueId: UUIDModel
    provider: ProviderId
    name: str
    season: int
    format: Optional[str] = None
    avatarUrl: Optional[AnyUrl] = None
    lastSyncAt: Optional[datetime] = None
    teams: Optional[int] = None
    status: Optional[Status3] = None


class Scoring(BaseModel):
    model_config = ConfigDict(extra='forbid')

    type: str
    ppr: float
    bonusRules: Optional[List[str]] = None


class RosterSettings(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slots: List[RosterSlotRule]
    benchSlots: conint(ge=0)
    irSlots: Optional[conint(ge=0)] = None
    notes: Optional[str] = None


class LeagueDetail(BaseModel):
    model_config = ConfigDict(extra='forbid')

    league: LeagueSummary
    teams: List[TeamReference]
    standings: Optional[List[TeamStanding]] = None
    scoring: Scoring
    rosterSettings: Optional[RosterSettings] = None
    provenance: Optional[Provenance] = None


class ScoringPeriod(BaseModel):
    model_config = ConfigDict(extra='forbid')

    season: conint(ge=2000)
    week: conint(ge=1, le=23)


class LeagueListResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    total: conint(ge=0)
    page: conint(ge=1)
    pageSize: conint(ge=1)
    items: List[LeagueSummary]


class Status4(Enum):
    starting = 'starting'
    bench = 'bench'
    locked = 'locked'
    inactive = 'inactive'


class LineupSlot(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    player: PlayerSummary
    projected: ProjectionSummary
    status: Optional[Status4] = 'starting'
    actualPoints: Optional[float] = None
    notes: Optional[str] = None


class TeamLineupResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    team: TeamReference
    period: ScoringPeriod
    lineup: List[LineupSlot]
    bench: List[LineupSlot]
    totalProjected: Optional[float] = None
    totalActual: Optional[float] = None
    provenance: Optional[Provenance] = None


class Focus(Enum):
    balanced = 'balanced'
    ceiling = 'ceiling'
    floor = 'floor'


class OptimizationObjective(BaseModel):
    model_config = ConfigDict(extra='forbid')

    focus: Focus
    ceilingWeight: Optional[confloat(ge=0.0, le=1.0)] = 0.5
    variancePenalty: Optional[confloat(ge=0.0, le=1.0)] = 0.25
    notes: Optional[str] = None


class LockedPlayer(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    playerId: UUIDModel


class RiskTolerance(Enum):
    low = 'low'
    medium = 'medium'
    high = 'high'


class OptimizationConstraints(BaseModel):
    model_config = ConfigDict(extra='forbid')

    lockedPlayers: Optional[List[LockedPlayer]] = None
    excludedPlayerIds: Optional[List[UUIDModel]] = None
    maxPlayersPerTeam: Optional[conint(ge=1)] = None
    riskTolerance: Optional[RiskTolerance] = 'medium'
    benchDepth: Optional[conint(ge=0)] = None


class Context(BaseModel):
    model_config = ConfigDict(extra='forbid')

    includeWaivers: Optional[bool] = False
    includeTrades: Optional[bool] = False
    notes: Optional[str] = None


class OptimizationRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    period: ScoringPeriod
    objective: OptimizationObjective
    constraints: Optional[OptimizationConstraints] = None
    context: Optional[Context] = None


class OptimizationSlot(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    player: PlayerSummary
    projection: ProjectionSummary
    delta: Optional[float] = None
    reason: Optional[str] = None


class Change(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    inPlayerId: UUIDModel
    outPlayerId: UUIDModel


class OptimizationAlternative(BaseModel):
    model_config = ConfigDict(extra='forbid')

    rank: conint(ge=1)
    projectedPoints: float
    deltaFromBest: Optional[float] = None
    lineup: List[OptimizationSlot]
    changes: Optional[List[Change]] = None


class OptimizationResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    runId: UUIDModel
    submittedAt: datetime
    objective: OptimizationObjective
    resultLineup: List[OptimizationSlot]
    bench: List[OptimizationSlot]
    alternatives: Optional[List[OptimizationAlternative]] = None
    insights: Optional[List[str]] = None
    provenance: Optional[Provenance] = None


class Opponent(BaseModel):
    model_config = ConfigDict(extra='forbid')

    team: Optional[str] = None
    home: Optional[bool] = None
    impliedTotal: Optional[float] = None
    paceRank: Optional[int] = None


class Usage(BaseModel):
    model_config = ConfigDict(extra='forbid')

    snapShare: Optional[float] = None
    routeShare: Optional[float] = None
    targetShare: Optional[float] = None
    rushShare: Optional[float] = None


class ProjectionRecord(BaseModel):
    model_config = ConfigDict(extra='forbid')

    player: PlayerSummary
    period: ScoringPeriod
    leagueId: Optional[UUIDModel] = None
    projection: ProjectionSummary
    opponent: Optional[Opponent] = None
    usage: Optional[Usage] = None


class ProjectionListResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    total: conint(ge=0)
    page: conint(ge=1)
    pageSize: conint(ge=1)
    items: List[ProjectionRecord]


class Usage1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    snapShare: Optional[float] = None
    routeShare: Optional[float] = None
    targetShare: Optional[float] = None
    rushShare: Optional[float] = None
    redZoneTouchShare: Optional[float] = None


class Efficiency(BaseModel):
    model_config = ConfigDict(extra='forbid')

    yprr: Optional[float] = None
    adot: Optional[float] = None
    epaPerTarget: Optional[float] = None
    epaPerRush: Optional[float] = None
    successRate: Optional[float] = None


class Context1(BaseModel):
    model_config = ConfigDict(extra='forbid')

    paceRank: Optional[int] = None
    proe: Optional[float] = None
    matchupDifficulty: Optional[str] = None


class PlayerMetrics(BaseModel):
    model_config = ConfigDict(extra='forbid')

    season: int
    week: int
    usage: Optional[Usage1] = None
    efficiency: Optional[Efficiency] = None
    context: Optional[Context1] = None
    provenance: Optional[Provenance] = None


class RecentGame(BaseModel):
    model_config = ConfigDict(extra='forbid')

    season: int
    week: int
    opponent: str
    fantasyPoints: Optional[float] = None
    snapShare: Optional[float] = None
    notes: Optional[str] = None


class Projections(BaseModel):
    model_config = ConfigDict(extra='forbid')

    weekly: ProjectionSummary
    ros: Optional[ProjectionSummary] = None


class PlayerDetail(BaseModel):
    model_config = ConfigDict(extra='forbid')

    player: PlayerSummary
    metrics: PlayerMetrics
    projections: Projections
    recentGames: Optional[List[RecentGame]] = None
    insights: Optional[List[str]] = None


class PlayerListResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    total: conint(ge=0)
    page: conint(ge=1)
    pageSize: conint(ge=1)
    items: List[PlayerSummary]


class FAABRange(BaseModel):
    model_config = ConfigDict(extra='forbid')

    low: float
    medium: float
    high: float


class RecommendedAction(Enum):
    add = 'add'
    monitor = 'monitor'
    avoid = 'avoid'


class ReplacementComparison(BaseModel):
    model_config = ConfigDict(extra='forbid')

    dropPlayerId: Optional[UUIDModel] = None
    deltaPoints: Optional[float] = None


class WaiverRecommendation(BaseModel):
    model_config = ConfigDict(extra='forbid')

    player: PlayerSummary
    projectedPoints: float
    faab: FAABRange
    priority: conint(ge=1)
    recommendedAction: RecommendedAction
    reason: Optional[str] = None
    replacementComparison: Optional[ReplacementComparison] = None
    provenance: Optional[Provenance] = None


class WaiverListResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    total: conint(ge=0)
    page: conint(ge=1)
    pageSize: conint(ge=1)
    items: List[WaiverRecommendation]


class Type(Enum):
    player = 'player'
    pick = 'pick'
    fab = 'fab'


class TradeAsset(BaseModel):
    model_config = ConfigDict(extra='forbid')

    type: Type
    id: str
    teamId: UUIDModel
    description: Optional[str] = None


class TradeEstimateRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    leagueId: UUIDModel
    period: Optional[ScoringPeriod] = None
    fromTeamId: UUIDModel
    toTeamId: UUIDModel
    offer: List[TradeAsset]
    request: List[TradeAsset]
    allowCounter: Optional[bool] = True
    includeWaiverAlternatives: Optional[bool] = False


class LineupChange(BaseModel):
    model_config = ConfigDict(extra='forbid')

    slot: str
    inPlayerId: UUIDModel
    outPlayerId: UUIDModel


class TradeImpact(BaseModel):
    model_config = ConfigDict(extra='forbid')

    teamId: UUIDModel
    projectedDelta: float
    riskDelta: Optional[float] = None
    lineupChanges: Optional[List[LineupChange]] = None
    notes: Optional[str] = None


class RecommendedAction1(Enum):
    proceed = 'proceed'
    counter = 'counter'
    decline = 'decline'


class ReplacementImpact(BaseModel):
    model_config = ConfigDict(extra='forbid')

    teamId: Optional[UUIDModel] = None
    delta: Optional[float] = None


class TradeEstimateResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    fairnessScore: confloat(ge=0.0, le=1.0)
    recommendedAction: RecommendedAction1
    summary: Optional[str] = None
    teamImpacts: List[TradeImpact]
    replacementImpact: Optional[ReplacementImpact] = None
    warnings: Optional[List[str]] = None
    provenance: Provenance


class RefreshRequest(BaseModel):
    model_config = ConfigDict(extra='forbid')

    leagueId: Optional[UUIDModel] = None
    teamId: Optional[UUIDModel] = None
    force: Optional[bool] = False


class Status5(Enum):
    queued = 'queued'
    in_progress = 'in-progress'
    skipped = 'skipped'


class RefreshResponse(BaseModel):
    model_config = ConfigDict(extra='forbid')

    scope: ScopeId
    status: Status5
    enqueuedAt: datetime
    estimatedCompletion: Optional[datetime] = None
    context: Optional[Dict[str, Any]] = None
    provenance: Optional[Provenance] = None


class ImpactType(Enum):
    touchdown = 'touchdown'
    injury = 'injury'
    drive = 'drive'
    projection_update = 'projection-update'
    status = 'status'


class AffectedPlayer(BaseModel):
    model_config = ConfigDict(extra='forbid')

    playerId: UUIDModel
    team: str
    impact: Optional[str] = None
    pointsDelta: Optional[float] = None


class LiveImpactEvent(BaseModel):
    model_config = ConfigDict(extra='forbid')

    eventId: str
    gameId: str
    playId: int
    occurredAt: datetime
    headline: str
    description: Optional[str] = None
    impactType: ImpactType
    affectedPlayers: Optional[List[AffectedPlayer]] = None
    fantasyImplications: List[str]
    provenance: Optional[Provenance] = None
    links: Optional[List[AnyUrl]] = None
