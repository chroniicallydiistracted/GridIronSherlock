/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  OptimizationRequest,
  OptimizationResponse,
  TeamLineupResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OptimizationRequestFromJSON,
    OptimizationRequestToJSON,
    OptimizationResponseFromJSON,
    OptimizationResponseToJSON,
    TeamLineupResponseFromJSON,
    TeamLineupResponseToJSON,
} from '../models/index';

export interface GetTeamLineupRequest {
    teamId: string;
    season?: number;
    week?: number;
}

export interface OptimizeTeamLineupRequest {
    teamId: string;
    optimizationRequest: OptimizationRequest;
}

/**
 * 
 */
export class TeamsApi extends runtime.BaseAPI {

    /**
     * Get the tracked lineup for a team
     */
    async getTeamLineupRaw(requestParameters: GetTeamLineupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TeamLineupResponse>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling getTeamLineup().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['season'] != null) {
            queryParameters['season'] = requestParameters['season'];
        }

        if (requestParameters['week'] != null) {
            queryParameters['week'] = requestParameters['week'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teams/{teamId}/lineup`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeamLineupResponseFromJSON(jsonValue));
    }

    /**
     * Get the tracked lineup for a team
     */
    async getTeamLineup(requestParameters: GetTeamLineupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TeamLineupResponse> {
        const response = await this.getTeamLineupRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Run the lineup optimizer
     */
    async optimizeTeamLineupRaw(requestParameters: OptimizeTeamLineupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OptimizationResponse>> {
        if (requestParameters['teamId'] == null) {
            throw new runtime.RequiredError(
                'teamId',
                'Required parameter "teamId" was null or undefined when calling optimizeTeamLineup().'
            );
        }

        if (requestParameters['optimizationRequest'] == null) {
            throw new runtime.RequiredError(
                'optimizationRequest',
                'Required parameter "optimizationRequest" was null or undefined when calling optimizeTeamLineup().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/teams/{teamId}/optimize`.replace(`{${"teamId"}}`, encodeURIComponent(String(requestParameters['teamId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OptimizationRequestToJSON(requestParameters['optimizationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OptimizationResponseFromJSON(jsonValue));
    }

    /**
     * Run the lineup optimizer
     */
    async optimizeTeamLineup(requestParameters: OptimizeTeamLineupRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OptimizationResponse> {
        const response = await this.optimizeTeamLineupRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
