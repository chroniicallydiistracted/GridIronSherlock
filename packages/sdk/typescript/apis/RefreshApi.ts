/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  RefreshRequest,
  RefreshResponse,
  ScopeId,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    RefreshRequestFromJSON,
    RefreshRequestToJSON,
    RefreshResponseFromJSON,
    RefreshResponseToJSON,
    ScopeIdFromJSON,
    ScopeIdToJSON,
} from '../models/index';

export interface TriggerRefreshRequest {
    scope: ScopeId;
    refreshRequest?: RefreshRequest;
}

/**
 * 
 */
export class RefreshApi extends runtime.BaseAPI {

    /**
     * Trigger a background refresh
     */
    async triggerRefreshRaw(requestParameters: TriggerRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RefreshResponse>> {
        if (requestParameters['scope'] == null) {
            throw new runtime.RequiredError(
                'scope',
                'Required parameter "scope" was null or undefined when calling triggerRefresh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/refresh/{scope}`.replace(`{${"scope"}}`, encodeURIComponent(String(requestParameters['scope']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RefreshRequestToJSON(requestParameters['refreshRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RefreshResponseFromJSON(jsonValue));
    }

    /**
     * Trigger a background refresh
     */
    async triggerRefresh(requestParameters: TriggerRefreshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RefreshResponse> {
        const response = await this.triggerRefreshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
