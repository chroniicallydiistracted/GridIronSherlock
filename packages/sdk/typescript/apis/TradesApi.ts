/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  TradeEstimateRequest,
  TradeEstimateResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    TradeEstimateRequestFromJSON,
    TradeEstimateRequestToJSON,
    TradeEstimateResponseFromJSON,
    TradeEstimateResponseToJSON,
} from '../models/index';

export interface EstimateTradeRequest {
    tradeEstimateRequest: TradeEstimateRequest;
}

/**
 * 
 */
export class TradesApi extends runtime.BaseAPI {

    /**
     * Estimate trade fairness and impact
     */
    async estimateTradeRaw(requestParameters: EstimateTradeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TradeEstimateResponse>> {
        if (requestParameters['tradeEstimateRequest'] == null) {
            throw new runtime.RequiredError(
                'tradeEstimateRequest',
                'Required parameter "tradeEstimateRequest" was null or undefined when calling estimateTrade().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/trades/estimate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeEstimateRequestToJSON(requestParameters['tradeEstimateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeEstimateResponseFromJSON(jsonValue));
    }

    /**
     * Estimate trade fairness and impact
     */
    async estimateTrade(requestParameters: EstimateTradeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TradeEstimateResponse> {
        const response = await this.estimateTradeRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
