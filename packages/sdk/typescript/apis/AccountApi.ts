/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AccountLinkRequest,
  AccountLinkResponse,
  ErrorResponse,
  OAuthCallbackResponse,
  ProviderId,
  UserProfile,
} from '../models/index';
import {
    AccountLinkRequestFromJSON,
    AccountLinkRequestToJSON,
    AccountLinkResponseFromJSON,
    AccountLinkResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    OAuthCallbackResponseFromJSON,
    OAuthCallbackResponseToJSON,
    ProviderIdFromJSON,
    ProviderIdToJSON,
    UserProfileFromJSON,
    UserProfileToJSON,
} from '../models/index';

export interface HandleOAuthCallbackRequest {
    provider: ProviderId;
    code?: string;
    state?: string;
}

export interface StartAccountLinkRequest {
    provider: ProviderId;
    accountLinkRequest?: AccountLinkRequest;
}

/**
 * 
 */
export class AccountApi extends runtime.BaseAPI {

    /**
     * Get the authenticated user profile
     */
    async getCurrentUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserProfile>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/me`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }

    /**
     * Get the authenticated user profile
     */
    async getCurrentUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserProfile> {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }

    /**
     * Handle OAuth callback response
     */
    async handleOAuthCallbackRaw(requestParameters: HandleOAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuthCallbackResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling handleOAuthCallback().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }

        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/oauth/{provider}/callback`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthCallbackResponseFromJSON(jsonValue));
    }

    /**
     * Handle OAuth callback response
     */
    async handleOAuthCallback(requestParameters: HandleOAuthCallbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuthCallbackResponse> {
        const response = await this.handleOAuthCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Begin OAuth linking for a provider
     */
    async startAccountLinkRaw(requestParameters: StartAccountLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AccountLinkResponse>> {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError(
                'provider',
                'Required parameter "provider" was null or undefined when calling startAccountLink().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/accounts/{provider}/link`;
        urlPath = urlPath.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountLinkRequestToJSON(requestParameters['accountLinkRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AccountLinkResponseFromJSON(jsonValue));
    }

    /**
     * Begin OAuth linking for a provider
     */
    async startAccountLink(requestParameters: StartAccountLinkRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AccountLinkResponse> {
        const response = await this.startAccountLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
