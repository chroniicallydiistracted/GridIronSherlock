/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  PlayerDetail,
  PlayerListResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    PlayerDetailFromJSON,
    PlayerDetailToJSON,
    PlayerListResponseFromJSON,
    PlayerListResponseToJSON,
} from '../models/index';

export interface GetPlayerRequest {
    playerId: string;
    leagueId?: string;
}

export interface SearchPlayersRequest {
    page?: number;
    pageSize?: number;
    query?: string;
    position?: string;
    team?: string;
    leagueId?: string;
}

/**
 * 
 */
export class PlayersApi extends runtime.BaseAPI {

    /**
     * Get player detail
     */
    async getPlayerRaw(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerDetail>> {
        if (requestParameters['playerId'] == null) {
            throw new runtime.RequiredError(
                'playerId',
                'Required parameter "playerId" was null or undefined when calling getPlayer().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['leagueId'] != null) {
            queryParameters['leagueId'] = requestParameters['leagueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players/{playerId}`.replace(`{${"playerId"}}`, encodeURIComponent(String(requestParameters['playerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerDetailFromJSON(jsonValue));
    }

    /**
     * Get player detail
     */
    async getPlayer(requestParameters: GetPlayerRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerDetail> {
        const response = await this.getPlayerRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Search players
     */
    async searchPlayersRaw(requestParameters: SearchPlayersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PlayerListResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        if (requestParameters['position'] != null) {
            queryParameters['position'] = requestParameters['position'];
        }

        if (requestParameters['team'] != null) {
            queryParameters['team'] = requestParameters['team'];
        }

        if (requestParameters['leagueId'] != null) {
            queryParameters['leagueId'] = requestParameters['leagueId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/players`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PlayerListResponseFromJSON(jsonValue));
    }

    /**
     * Search players
     */
    async searchPlayers(requestParameters: SearchPlayersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PlayerListResponse> {
        const response = await this.searchPlayersRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
