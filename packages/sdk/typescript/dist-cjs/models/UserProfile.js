"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfUserProfile = instanceOfUserProfile;
exports.UserProfileFromJSON = UserProfileFromJSON;
exports.UserProfileFromJSONTyped = UserProfileFromJSONTyped;
exports.UserProfileToJSON = UserProfileToJSON;
const UserProfilePreferences_1 = require("./UserProfilePreferences");
const LinkedAccount_1 = require("./LinkedAccount");
/**
 * Check if a given object implements the UserProfile interface.
 */
function instanceOfUserProfile(value) {
    if (!('userId' in value) || value['userId'] === undefined)
        return false;
    if (!('email' in value) || value['email'] === undefined)
        return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined)
        return false;
    if (!('accounts' in value) || value['accounts'] === undefined)
        return false;
    if (!('activeLeagueIds' in value) || value['activeLeagueIds'] === undefined)
        return false;
    return true;
}
function UserProfileFromJSON(json) {
    return UserProfileFromJSONTyped(json, false);
}
function UserProfileFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'userId': json['userId'],
        'email': json['email'],
        'createdAt': (new Date(json['createdAt'])),
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'accounts': (json['accounts'].map(LinkedAccount_1.LinkedAccountFromJSON)),
        'activeLeagueIds': json['activeLeagueIds'],
        'preferences': json['preferences'] == null ? undefined : (0, UserProfilePreferences_1.UserProfilePreferencesFromJSON)(json['preferences']),
        'featureFlags': json['featureFlags'] == null ? undefined : json['featureFlags'],
    };
}
function UserProfileToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'userId': value['userId'],
        'email': value['email'],
        'createdAt': ((value['createdAt']).toISOString()),
        'displayName': value['displayName'],
        'accounts': (value['accounts'].map(LinkedAccount_1.LinkedAccountToJSON)),
        'activeLeagueIds': value['activeLeagueIds'],
        'preferences': (0, UserProfilePreferences_1.UserProfilePreferencesToJSON)(value['preferences']),
        'featureFlags': value['featureFlags'],
    };
}
