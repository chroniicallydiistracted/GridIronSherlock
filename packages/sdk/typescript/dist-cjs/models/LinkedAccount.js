"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkedAccountStatusEnum = void 0;
exports.instanceOfLinkedAccount = instanceOfLinkedAccount;
exports.LinkedAccountFromJSON = LinkedAccountFromJSON;
exports.LinkedAccountFromJSONTyped = LinkedAccountFromJSONTyped;
exports.LinkedAccountToJSON = LinkedAccountToJSON;
const ProviderId_1 = require("./ProviderId");
/**
 * @export
 */
exports.LinkedAccountStatusEnum = {
    Linked: 'linked',
    Pending: 'pending',
    Error: 'error'
};
/**
 * Check if a given object implements the LinkedAccount interface.
 */
function instanceOfLinkedAccount(value) {
    if (!('provider' in value) || value['provider'] === undefined)
        return false;
    if (!('status' in value) || value['status'] === undefined)
        return false;
    if (!('scopes' in value) || value['scopes'] === undefined)
        return false;
    if (!('linkedAt' in value) || value['linkedAt'] === undefined)
        return false;
    if (!('needsReauth' in value) || value['needsReauth'] === undefined)
        return false;
    return true;
}
function LinkedAccountFromJSON(json) {
    return LinkedAccountFromJSONTyped(json, false);
}
function LinkedAccountFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'provider': (0, ProviderId_1.ProviderIdFromJSON)(json['provider']),
        'status': json['status'],
        'scopes': json['scopes'],
        'linkedAt': (new Date(json['linkedAt'])),
        'lastSyncAt': json['lastSyncAt'] == null ? undefined : (new Date(json['lastSyncAt'])),
        'needsReauth': json['needsReauth'],
        'errorCode': json['errorCode'] == null ? undefined : json['errorCode'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
    };
}
function LinkedAccountToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'provider': (0, ProviderId_1.ProviderIdToJSON)(value['provider']),
        'status': value['status'],
        'scopes': value['scopes'],
        'linkedAt': ((value['linkedAt']).toISOString()),
        'lastSyncAt': value['lastSyncAt'] == null ? undefined : ((value['lastSyncAt']).toISOString()),
        'needsReauth': value['needsReauth'],
        'errorCode': value['errorCode'],
        'errorMessage': value['errorMessage'],
    };
}
