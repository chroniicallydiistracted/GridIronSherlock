"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfTeamLineupResponse = instanceOfTeamLineupResponse;
exports.TeamLineupResponseFromJSON = TeamLineupResponseFromJSON;
exports.TeamLineupResponseFromJSONTyped = TeamLineupResponseFromJSONTyped;
exports.TeamLineupResponseToJSON = TeamLineupResponseToJSON;
const TeamReference_1 = require("./TeamReference");
const Provenance_1 = require("./Provenance");
const LineupSlot_1 = require("./LineupSlot");
const ScoringPeriod_1 = require("./ScoringPeriod");
/**
 * Check if a given object implements the TeamLineupResponse interface.
 */
function instanceOfTeamLineupResponse(value) {
    if (!('team' in value) || value['team'] === undefined)
        return false;
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('lineup' in value) || value['lineup'] === undefined)
        return false;
    if (!('bench' in value) || value['bench'] === undefined)
        return false;
    return true;
}
function TeamLineupResponseFromJSON(json) {
    return TeamLineupResponseFromJSONTyped(json, false);
}
function TeamLineupResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'team': (0, TeamReference_1.TeamReferenceFromJSON)(json['team']),
        'period': (0, ScoringPeriod_1.ScoringPeriodFromJSON)(json['period']),
        'lineup': (json['lineup'].map(LineupSlot_1.LineupSlotFromJSON)),
        'bench': (json['bench'].map(LineupSlot_1.LineupSlotFromJSON)),
        'totalProjected': json['totalProjected'] == null ? undefined : json['totalProjected'],
        'totalActual': json['totalActual'] == null ? undefined : json['totalActual'],
        'provenance': json['provenance'] == null ? undefined : (0, Provenance_1.ProvenanceFromJSON)(json['provenance']),
    };
}
function TeamLineupResponseToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'team': (0, TeamReference_1.TeamReferenceToJSON)(value['team']),
        'period': (0, ScoringPeriod_1.ScoringPeriodToJSON)(value['period']),
        'lineup': (value['lineup'].map(LineupSlot_1.LineupSlotToJSON)),
        'bench': (value['bench'].map(LineupSlot_1.LineupSlotToJSON)),
        'totalProjected': value['totalProjected'],
        'totalActual': value['totalActual'],
        'provenance': (0, Provenance_1.ProvenanceToJSON)(value['provenance']),
    };
}
