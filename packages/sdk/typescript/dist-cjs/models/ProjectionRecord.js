"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfProjectionRecord = instanceOfProjectionRecord;
exports.ProjectionRecordFromJSON = ProjectionRecordFromJSON;
exports.ProjectionRecordFromJSONTyped = ProjectionRecordFromJSONTyped;
exports.ProjectionRecordToJSON = ProjectionRecordToJSON;
const ProjectionRecordOpponent_1 = require("./ProjectionRecordOpponent");
const PlayerSummary_1 = require("./PlayerSummary");
const ProjectionSummary_1 = require("./ProjectionSummary");
const ScoringPeriod_1 = require("./ScoringPeriod");
const ProjectionRecordUsage_1 = require("./ProjectionRecordUsage");
/**
 * Check if a given object implements the ProjectionRecord interface.
 */
function instanceOfProjectionRecord(value) {
    if (!('player' in value) || value['player'] === undefined)
        return false;
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('projection' in value) || value['projection'] === undefined)
        return false;
    return true;
}
function ProjectionRecordFromJSON(json) {
    return ProjectionRecordFromJSONTyped(json, false);
}
function ProjectionRecordFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'player': (0, PlayerSummary_1.PlayerSummaryFromJSON)(json['player']),
        'period': (0, ScoringPeriod_1.ScoringPeriodFromJSON)(json['period']),
        'leagueId': json['leagueId'] == null ? undefined : json['leagueId'],
        'projection': (0, ProjectionSummary_1.ProjectionSummaryFromJSON)(json['projection']),
        'opponent': json['opponent'] == null ? undefined : (0, ProjectionRecordOpponent_1.ProjectionRecordOpponentFromJSON)(json['opponent']),
        'usage': json['usage'] == null ? undefined : (0, ProjectionRecordUsage_1.ProjectionRecordUsageFromJSON)(json['usage']),
    };
}
function ProjectionRecordToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'player': (0, PlayerSummary_1.PlayerSummaryToJSON)(value['player']),
        'period': (0, ScoringPeriod_1.ScoringPeriodToJSON)(value['period']),
        'leagueId': value['leagueId'],
        'projection': (0, ProjectionSummary_1.ProjectionSummaryToJSON)(value['projection']),
        'opponent': (0, ProjectionRecordOpponent_1.ProjectionRecordOpponentToJSON)(value['opponent']),
        'usage': (0, ProjectionRecordUsage_1.ProjectionRecordUsageToJSON)(value['usage']),
    };
}
