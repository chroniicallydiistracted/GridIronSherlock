"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.instanceOfOptimizationRequest = instanceOfOptimizationRequest;
exports.OptimizationRequestFromJSON = OptimizationRequestFromJSON;
exports.OptimizationRequestFromJSONTyped = OptimizationRequestFromJSONTyped;
exports.OptimizationRequestToJSON = OptimizationRequestToJSON;
const OptimizationConstraints_1 = require("./OptimizationConstraints");
const OptimizationObjective_1 = require("./OptimizationObjective");
const ScoringPeriod_1 = require("./ScoringPeriod");
const OptimizationRequestContext_1 = require("./OptimizationRequestContext");
/**
 * Check if a given object implements the OptimizationRequest interface.
 */
function instanceOfOptimizationRequest(value) {
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('objective' in value) || value['objective'] === undefined)
        return false;
    return true;
}
function OptimizationRequestFromJSON(json) {
    return OptimizationRequestFromJSONTyped(json, false);
}
function OptimizationRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'period': (0, ScoringPeriod_1.ScoringPeriodFromJSON)(json['period']),
        'objective': (0, OptimizationObjective_1.OptimizationObjectiveFromJSON)(json['objective']),
        'constraints': json['constraints'] == null ? undefined : (0, OptimizationConstraints_1.OptimizationConstraintsFromJSON)(json['constraints']),
        'context': json['context'] == null ? undefined : (0, OptimizationRequestContext_1.OptimizationRequestContextFromJSON)(json['context']),
    };
}
function OptimizationRequestToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'period': (0, ScoringPeriod_1.ScoringPeriodToJSON)(value['period']),
        'objective': (0, OptimizationObjective_1.OptimizationObjectiveToJSON)(value['objective']),
        'constraints': (0, OptimizationConstraints_1.OptimizationConstraintsToJSON)(value['constraints']),
        'context': (0, OptimizationRequestContext_1.OptimizationRequestContextToJSON)(value['context']),
    };
}
