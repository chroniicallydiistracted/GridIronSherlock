/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime.js';
import { AccountLinkRequestToJSON, AccountLinkResponseFromJSON, OAuthCallbackResponseFromJSON, UserProfileFromJSON, } from '../models/index.js';
/**
 *
 */
export class AccountApi extends runtime.BaseAPI {
    /**
     * Get the authenticated user profile
     */
    async getCurrentUserRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => UserProfileFromJSON(jsonValue));
    }
    /**
     * Get the authenticated user profile
     */
    async getCurrentUser(initOverrides) {
        const response = await this.getCurrentUserRaw(initOverrides);
        return await response.value();
    }
    /**
     * Handle OAuth callback response
     */
    async handleOAuthCallbackRaw(requestParameters, initOverrides) {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError('provider', 'Required parameter "provider" was null or undefined when calling handleOAuthCallback().');
        }
        const queryParameters = {};
        if (requestParameters['code'] != null) {
            queryParameters['code'] = requestParameters['code'];
        }
        if (requestParameters['state'] != null) {
            queryParameters['state'] = requestParameters['state'];
        }
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/oauth/{provider}/callback`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => OAuthCallbackResponseFromJSON(jsonValue));
    }
    /**
     * Handle OAuth callback response
     */
    async handleOAuthCallback(requestParameters, initOverrides) {
        const response = await this.handleOAuthCallbackRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     * Begin OAuth linking for a provider
     */
    async startAccountLinkRaw(requestParameters, initOverrides) {
        if (requestParameters['provider'] == null) {
            throw new runtime.RequiredError('provider', 'Required parameter "provider" was null or undefined when calling startAccountLink().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("serviceToken", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/accounts/{provider}/link`.replace(`{${"provider"}}`, encodeURIComponent(String(requestParameters['provider']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AccountLinkRequestToJSON(requestParameters['accountLinkRequest']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => AccountLinkResponseFromJSON(jsonValue));
    }
    /**
     * Begin OAuth linking for a provider
     */
    async startAccountLink(requestParameters, initOverrides) {
        const response = await this.startAccountLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
