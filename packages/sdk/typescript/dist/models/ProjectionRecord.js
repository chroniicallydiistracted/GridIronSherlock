/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ProjectionRecordOpponentFromJSON, ProjectionRecordOpponentToJSON, } from './ProjectionRecordOpponent.js';
import { PlayerSummaryFromJSON, PlayerSummaryToJSON, } from './PlayerSummary.js';
import { ProjectionSummaryFromJSON, ProjectionSummaryToJSON, } from './ProjectionSummary.js';
import { ScoringPeriodFromJSON, ScoringPeriodToJSON, } from './ScoringPeriod.js';
import { ProjectionRecordUsageFromJSON, ProjectionRecordUsageToJSON, } from './ProjectionRecordUsage.js';
/**
 * Check if a given object implements the ProjectionRecord interface.
 */
export function instanceOfProjectionRecord(value) {
    if (!('player' in value) || value['player'] === undefined)
        return false;
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('projection' in value) || value['projection'] === undefined)
        return false;
    return true;
}
export function ProjectionRecordFromJSON(json) {
    return ProjectionRecordFromJSONTyped(json, false);
}
export function ProjectionRecordFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'player': PlayerSummaryFromJSON(json['player']),
        'period': ScoringPeriodFromJSON(json['period']),
        'leagueId': json['leagueId'] == null ? undefined : json['leagueId'],
        'projection': ProjectionSummaryFromJSON(json['projection']),
        'opponent': json['opponent'] == null ? undefined : ProjectionRecordOpponentFromJSON(json['opponent']),
        'usage': json['usage'] == null ? undefined : ProjectionRecordUsageFromJSON(json['usage']),
    };
}
export function ProjectionRecordToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'player': PlayerSummaryToJSON(value['player']),
        'period': ScoringPeriodToJSON(value['period']),
        'leagueId': value['leagueId'],
        'projection': ProjectionSummaryToJSON(value['projection']),
        'opponent': ProjectionRecordOpponentToJSON(value['opponent']),
        'usage': ProjectionRecordUsageToJSON(value['usage']),
    };
}
