/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { ScoringPeriodFromJSON, ScoringPeriodToJSON, } from './ScoringPeriod.js';
import { TradeAssetFromJSON, TradeAssetToJSON, } from './TradeAsset.js';
/**
 * Check if a given object implements the TradeEstimateRequest interface.
 */
export function instanceOfTradeEstimateRequest(value) {
    if (!('leagueId' in value) || value['leagueId'] === undefined)
        return false;
    if (!('fromTeamId' in value) || value['fromTeamId'] === undefined)
        return false;
    if (!('toTeamId' in value) || value['toTeamId'] === undefined)
        return false;
    if (!('offer' in value) || value['offer'] === undefined)
        return false;
    if (!('request' in value) || value['request'] === undefined)
        return false;
    return true;
}
export function TradeEstimateRequestFromJSON(json) {
    return TradeEstimateRequestFromJSONTyped(json, false);
}
export function TradeEstimateRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'leagueId': json['leagueId'],
        'period': json['period'] == null ? undefined : ScoringPeriodFromJSON(json['period']),
        'fromTeamId': json['fromTeamId'],
        'toTeamId': json['toTeamId'],
        'offer': (json['offer'].map(TradeAssetFromJSON)),
        'request': (json['request'].map(TradeAssetFromJSON)),
        'allowCounter': json['allowCounter'] == null ? undefined : json['allowCounter'],
        'includeWaiverAlternatives': json['includeWaiverAlternatives'] == null ? undefined : json['includeWaiverAlternatives'],
    };
}
export function TradeEstimateRequestToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'leagueId': value['leagueId'],
        'period': ScoringPeriodToJSON(value['period']),
        'fromTeamId': value['fromTeamId'],
        'toTeamId': value['toTeamId'],
        'offer': (value['offer'].map(TradeAssetToJSON)),
        'request': (value['request'].map(TradeAssetToJSON)),
        'allowCounter': value['allowCounter'],
        'includeWaiverAlternatives': value['includeWaiverAlternatives'],
    };
}
