/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { PlayerMetricsEfficiencyFromJSON, PlayerMetricsEfficiencyToJSON, } from './PlayerMetricsEfficiency.js';
import { ProvenanceFromJSON, ProvenanceToJSON, } from './Provenance.js';
import { PlayerMetricsContextFromJSON, PlayerMetricsContextToJSON, } from './PlayerMetricsContext.js';
import { PlayerMetricsUsageFromJSON, PlayerMetricsUsageToJSON, } from './PlayerMetricsUsage.js';
/**
 * Check if a given object implements the PlayerMetrics interface.
 */
export function instanceOfPlayerMetrics(value) {
    if (!('season' in value) || value['season'] === undefined)
        return false;
    if (!('week' in value) || value['week'] === undefined)
        return false;
    return true;
}
export function PlayerMetricsFromJSON(json) {
    return PlayerMetricsFromJSONTyped(json, false);
}
export function PlayerMetricsFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'season': json['season'],
        'week': json['week'],
        'usage': json['usage'] == null ? undefined : PlayerMetricsUsageFromJSON(json['usage']),
        'efficiency': json['efficiency'] == null ? undefined : PlayerMetricsEfficiencyFromJSON(json['efficiency']),
        'context': json['context'] == null ? undefined : PlayerMetricsContextFromJSON(json['context']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}
export function PlayerMetricsToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'season': value['season'],
        'week': value['week'],
        'usage': PlayerMetricsUsageToJSON(value['usage']),
        'efficiency': PlayerMetricsEfficiencyToJSON(value['efficiency']),
        'context': PlayerMetricsContextToJSON(value['context']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}
