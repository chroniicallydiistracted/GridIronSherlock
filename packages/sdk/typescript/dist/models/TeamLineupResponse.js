/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TeamReferenceFromJSON, TeamReferenceToJSON, } from './TeamReference.js';
import { ProvenanceFromJSON, ProvenanceToJSON, } from './Provenance.js';
import { LineupSlotFromJSON, LineupSlotToJSON, } from './LineupSlot.js';
import { ScoringPeriodFromJSON, ScoringPeriodToJSON, } from './ScoringPeriod.js';
/**
 * Check if a given object implements the TeamLineupResponse interface.
 */
export function instanceOfTeamLineupResponse(value) {
    if (!('team' in value) || value['team'] === undefined)
        return false;
    if (!('period' in value) || value['period'] === undefined)
        return false;
    if (!('lineup' in value) || value['lineup'] === undefined)
        return false;
    if (!('bench' in value) || value['bench'] === undefined)
        return false;
    return true;
}
export function TeamLineupResponseFromJSON(json) {
    return TeamLineupResponseFromJSONTyped(json, false);
}
export function TeamLineupResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'team': TeamReferenceFromJSON(json['team']),
        'period': ScoringPeriodFromJSON(json['period']),
        'lineup': (json['lineup'].map(LineupSlotFromJSON)),
        'bench': (json['bench'].map(LineupSlotFromJSON)),
        'totalProjected': json['totalProjected'] == null ? undefined : json['totalProjected'],
        'totalActual': json['totalActual'] == null ? undefined : json['totalActual'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}
export function TeamLineupResponseToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'team': TeamReferenceToJSON(value['team']),
        'period': ScoringPeriodToJSON(value['period']),
        'lineup': (value['lineup'].map(LineupSlotToJSON)),
        'bench': (value['bench'].map(LineupSlotToJSON)),
        'totalProjected': value['totalProjected'],
        'totalActual': value['totalActual'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}
