/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { TeamReferenceFromJSON, TeamReferenceToJSON, } from './TeamReference.js';
import { ProvenanceFromJSON, ProvenanceToJSON, } from './Provenance.js';
import { LeagueDetailScoringFromJSON, LeagueDetailScoringToJSON, } from './LeagueDetailScoring.js';
import { LeagueSummaryFromJSON, LeagueSummaryToJSON, } from './LeagueSummary.js';
import { TeamStandingFromJSON, TeamStandingToJSON, } from './TeamStanding.js';
import { LeagueDetailRosterSettingsFromJSON, LeagueDetailRosterSettingsToJSON, } from './LeagueDetailRosterSettings.js';
/**
 * Check if a given object implements the LeagueDetail interface.
 */
export function instanceOfLeagueDetail(value) {
    if (!('league' in value) || value['league'] === undefined)
        return false;
    if (!('teams' in value) || value['teams'] === undefined)
        return false;
    if (!('scoring' in value) || value['scoring'] === undefined)
        return false;
    return true;
}
export function LeagueDetailFromJSON(json) {
    return LeagueDetailFromJSONTyped(json, false);
}
export function LeagueDetailFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        ...json,
        'league': LeagueSummaryFromJSON(json['league']),
        'teams': (json['teams'].map(TeamReferenceFromJSON)),
        'standings': json['standings'] == null ? undefined : (json['standings'].map(TeamStandingFromJSON)),
        'scoring': LeagueDetailScoringFromJSON(json['scoring']),
        'rosterSettings': json['rosterSettings'] == null ? undefined : LeagueDetailRosterSettingsFromJSON(json['rosterSettings']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}
export function LeagueDetailToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        ...value,
        'league': LeagueSummaryToJSON(value['league']),
        'teams': (value['teams'].map(TeamReferenceToJSON)),
        'standings': value['standings'] == null ? undefined : (value['standings'].map(TeamStandingToJSON)),
        'scoring': LeagueDetailScoringToJSON(value['scoring']),
        'rosterSettings': LeagueDetailRosterSettingsToJSON(value['rosterSettings']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}
