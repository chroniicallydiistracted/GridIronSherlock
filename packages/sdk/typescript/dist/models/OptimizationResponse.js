/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { OptimizationAlternativeFromJSON, OptimizationAlternativeToJSON, } from './OptimizationAlternative.js';
import { ProvenanceFromJSON, ProvenanceToJSON, } from './Provenance.js';
import { OptimizationObjectiveFromJSON, OptimizationObjectiveToJSON, } from './OptimizationObjective.js';
import { OptimizationSlotFromJSON, OptimizationSlotToJSON, } from './OptimizationSlot.js';
/**
 * Check if a given object implements the OptimizationResponse interface.
 */
export function instanceOfOptimizationResponse(value) {
    if (!('runId' in value) || value['runId'] === undefined)
        return false;
    if (!('submittedAt' in value) || value['submittedAt'] === undefined)
        return false;
    if (!('objective' in value) || value['objective'] === undefined)
        return false;
    if (!('resultLineup' in value) || value['resultLineup'] === undefined)
        return false;
    if (!('bench' in value) || value['bench'] === undefined)
        return false;
    return true;
}
export function OptimizationResponseFromJSON(json) {
    return OptimizationResponseFromJSONTyped(json, false);
}
export function OptimizationResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'runId': json['runId'],
        'submittedAt': (new Date(json['submittedAt'])),
        'objective': OptimizationObjectiveFromJSON(json['objective']),
        'resultLineup': (json['resultLineup'].map(OptimizationSlotFromJSON)),
        'bench': (json['bench'].map(OptimizationSlotFromJSON)),
        'alternatives': json['alternatives'] == null ? undefined : (json['alternatives'].map(OptimizationAlternativeFromJSON)),
        'insights': json['insights'] == null ? undefined : json['insights'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}
export function OptimizationResponseToJSON(value) {
    if (value == null) {
        return value;
    }
    return {
        'runId': value['runId'],
        'submittedAt': ((value['submittedAt']).toISOString()),
        'objective': OptimizationObjectiveToJSON(value['objective']),
        'resultLineup': (value['resultLineup'].map(OptimizationSlotToJSON)),
        'bench': (value['bench'].map(OptimizationSlotToJSON)),
        'alternatives': value['alternatives'] == null ? undefined : (value['alternatives'].map(OptimizationAlternativeToJSON)),
        'insights': value['insights'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}
