/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LiveImpactEventAffectedPlayersInner } from './LiveImpactEventAffectedPlayersInner';
import {
    LiveImpactEventAffectedPlayersInnerFromJSON,
    LiveImpactEventAffectedPlayersInnerFromJSONTyped,
    LiveImpactEventAffectedPlayersInnerToJSON,
    LiveImpactEventAffectedPlayersInnerToJSONTyped,
} from './LiveImpactEventAffectedPlayersInner';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';

/**
 * 
 * @export
 * @interface LiveImpactEvent
 */
export interface LiveImpactEvent {
    /**
     * 
     * @type {string}
     * @memberof LiveImpactEvent
     */
    eventId: string;
    /**
     * 
     * @type {string}
     * @memberof LiveImpactEvent
     */
    gameId: string;
    /**
     * 
     * @type {number}
     * @memberof LiveImpactEvent
     */
    playId: number;
    /**
     * 
     * @type {Date}
     * @memberof LiveImpactEvent
     */
    occurredAt: Date;
    /**
     * 
     * @type {string}
     * @memberof LiveImpactEvent
     */
    headline: string;
    /**
     * 
     * @type {string}
     * @memberof LiveImpactEvent
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof LiveImpactEvent
     */
    impactType: LiveImpactEventImpactTypeEnum;
    /**
     * 
     * @type {Array<LiveImpactEventAffectedPlayersInner>}
     * @memberof LiveImpactEvent
     */
    affectedPlayers?: Array<LiveImpactEventAffectedPlayersInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveImpactEvent
     */
    fantasyImplications: Array<string>;
    /**
     * 
     * @type {Provenance}
     * @memberof LiveImpactEvent
     */
    provenance?: Provenance;
    /**
     * 
     * @type {Array<string>}
     * @memberof LiveImpactEvent
     */
    links?: Array<string>;
}


/**
 * @export
 */
export const LiveImpactEventImpactTypeEnum = {
    Touchdown: 'touchdown',
    Injury: 'injury',
    Drive: 'drive',
    ProjectionUpdate: 'projection-update',
    Status: 'status'
} as const;
export type LiveImpactEventImpactTypeEnum = typeof LiveImpactEventImpactTypeEnum[keyof typeof LiveImpactEventImpactTypeEnum];


/**
 * Check if a given object implements the LiveImpactEvent interface.
 */
export function instanceOfLiveImpactEvent(value: object): value is LiveImpactEvent {
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('gameId' in value) || value['gameId'] === undefined) return false;
    if (!('playId' in value) || value['playId'] === undefined) return false;
    if (!('occurredAt' in value) || value['occurredAt'] === undefined) return false;
    if (!('headline' in value) || value['headline'] === undefined) return false;
    if (!('impactType' in value) || value['impactType'] === undefined) return false;
    if (!('fantasyImplications' in value) || value['fantasyImplications'] === undefined) return false;
    return true;
}

export function LiveImpactEventFromJSON(json: any): LiveImpactEvent {
    return LiveImpactEventFromJSONTyped(json, false);
}

export function LiveImpactEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): LiveImpactEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'eventId': json['eventId'],
        'gameId': json['gameId'],
        'playId': json['playId'],
        'occurredAt': (new Date(json['occurredAt'])),
        'headline': json['headline'],
        'description': json['description'] == null ? undefined : json['description'],
        'impactType': json['impactType'],
        'affectedPlayers': json['affectedPlayers'] == null ? undefined : ((json['affectedPlayers'] as Array<any>).map(LiveImpactEventAffectedPlayersInnerFromJSON)),
        'fantasyImplications': json['fantasyImplications'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
        'links': json['links'] == null ? undefined : json['links'],
    };
}

export function LiveImpactEventToJSON(json: any): LiveImpactEvent {
    return LiveImpactEventToJSONTyped(json, false);
}

export function LiveImpactEventToJSONTyped(value?: LiveImpactEvent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'eventId': value['eventId'],
        'gameId': value['gameId'],
        'playId': value['playId'],
        'occurredAt': value['occurredAt'].toISOString(),
        'headline': value['headline'],
        'description': value['description'],
        'impactType': value['impactType'],
        'affectedPlayers': value['affectedPlayers'] == null ? undefined : ((value['affectedPlayers'] as Array<any>).map(LiveImpactEventAffectedPlayersInnerToJSON)),
        'fantasyImplications': value['fantasyImplications'],
        'provenance': ProvenanceToJSON(value['provenance']),
        'links': value['links'],
    };
}

