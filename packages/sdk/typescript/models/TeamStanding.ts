/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TeamReference } from './TeamReference';
import {
    TeamReferenceFromJSON,
    TeamReferenceFromJSONTyped,
    TeamReferenceToJSON,
    TeamReferenceToJSONTyped,
} from './TeamReference';

/**
 * 
 * @export
 * @interface TeamStanding
 */
export interface TeamStanding {
    /**
     * 
     * @type {TeamReference}
     * @memberof TeamStanding
     */
    team: TeamReference;
    /**
     * 
     * @type {number}
     * @memberof TeamStanding
     */
    rank: number;
    /**
     * 
     * @type {number}
     * @memberof TeamStanding
     */
    pointsFor: number;
    /**
     * 
     * @type {number}
     * @memberof TeamStanding
     */
    pointsAgainst: number;
    /**
     * 
     * @type {string}
     * @memberof TeamStanding
     */
    streak?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamStanding
     */
    notes?: string;
}

/**
 * Check if a given object implements the TeamStanding interface.
 */
export function instanceOfTeamStanding(value: object): value is TeamStanding {
    if (!('team' in value) || value['team'] === undefined) return false;
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('pointsFor' in value) || value['pointsFor'] === undefined) return false;
    if (!('pointsAgainst' in value) || value['pointsAgainst'] === undefined) return false;
    return true;
}

export function TeamStandingFromJSON(json: any): TeamStanding {
    return TeamStandingFromJSONTyped(json, false);
}

export function TeamStandingFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamStanding {
    if (json == null) {
        return json;
    }
    return {
        
        'team': TeamReferenceFromJSON(json['team']),
        'rank': json['rank'],
        'pointsFor': json['pointsFor'],
        'pointsAgainst': json['pointsAgainst'],
        'streak': json['streak'] == null ? undefined : json['streak'],
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function TeamStandingToJSON(json: any): TeamStanding {
    return TeamStandingToJSONTyped(json, false);
}

export function TeamStandingToJSONTyped(value?: TeamStanding | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'team': TeamReferenceToJSON(value['team']),
        'rank': value['rank'],
        'pointsFor': value['pointsFor'],
        'pointsAgainst': value['pointsAgainst'],
        'streak': value['streak'],
        'notes': value['notes'],
    };
}

