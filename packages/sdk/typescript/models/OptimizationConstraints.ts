/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptimizationConstraintsLockedPlayersInner } from './OptimizationConstraintsLockedPlayersInner';
import {
    OptimizationConstraintsLockedPlayersInnerFromJSON,
    OptimizationConstraintsLockedPlayersInnerFromJSONTyped,
    OptimizationConstraintsLockedPlayersInnerToJSON,
    OptimizationConstraintsLockedPlayersInnerToJSONTyped,
} from './OptimizationConstraintsLockedPlayersInner';

/**
 * 
 * @export
 * @interface OptimizationConstraints
 */
export interface OptimizationConstraints {
    /**
     * 
     * @type {Array<OptimizationConstraintsLockedPlayersInner>}
     * @memberof OptimizationConstraints
     */
    lockedPlayers?: Array<OptimizationConstraintsLockedPlayersInner>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OptimizationConstraints
     */
    excludedPlayerIds?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OptimizationConstraints
     */
    maxPlayersPerTeam?: number;
    /**
     * 
     * @type {string}
     * @memberof OptimizationConstraints
     */
    riskTolerance?: OptimizationConstraintsRiskToleranceEnum;
    /**
     * 
     * @type {number}
     * @memberof OptimizationConstraints
     */
    benchDepth?: number;
}


/**
 * @export
 */
export const OptimizationConstraintsRiskToleranceEnum = {
    Low: 'low',
    Medium: 'medium',
    High: 'high'
} as const;
export type OptimizationConstraintsRiskToleranceEnum = typeof OptimizationConstraintsRiskToleranceEnum[keyof typeof OptimizationConstraintsRiskToleranceEnum];


/**
 * Check if a given object implements the OptimizationConstraints interface.
 */
export function instanceOfOptimizationConstraints(value: object): value is OptimizationConstraints {
    return true;
}

export function OptimizationConstraintsFromJSON(json: any): OptimizationConstraints {
    return OptimizationConstraintsFromJSONTyped(json, false);
}

export function OptimizationConstraintsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationConstraints {
    if (json == null) {
        return json;
    }
    return {
        
        'lockedPlayers': json['lockedPlayers'] == null ? undefined : ((json['lockedPlayers'] as Array<any>).map(OptimizationConstraintsLockedPlayersInnerFromJSON)),
        'excludedPlayerIds': json['excludedPlayerIds'] == null ? undefined : json['excludedPlayerIds'],
        'maxPlayersPerTeam': json['maxPlayersPerTeam'] == null ? undefined : json['maxPlayersPerTeam'],
        'riskTolerance': json['riskTolerance'] == null ? undefined : json['riskTolerance'],
        'benchDepth': json['benchDepth'] == null ? undefined : json['benchDepth'],
    };
}

export function OptimizationConstraintsToJSON(json: any): OptimizationConstraints {
    return OptimizationConstraintsToJSONTyped(json, false);
}

export function OptimizationConstraintsToJSONTyped(value?: OptimizationConstraints | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'lockedPlayers': value['lockedPlayers'] == null ? undefined : ((value['lockedPlayers'] as Array<any>).map(OptimizationConstraintsLockedPlayersInnerToJSON)),
        'excludedPlayerIds': value['excludedPlayerIds'],
        'maxPlayersPerTeam': value['maxPlayersPerTeam'],
        'riskTolerance': value['riskTolerance'],
        'benchDepth': value['benchDepth'],
    };
}

