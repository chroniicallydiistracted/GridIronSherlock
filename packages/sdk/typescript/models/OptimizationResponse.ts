/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptimizationAlternative } from './OptimizationAlternative';
import {
    OptimizationAlternativeFromJSON,
    OptimizationAlternativeFromJSONTyped,
    OptimizationAlternativeToJSON,
    OptimizationAlternativeToJSONTyped,
} from './OptimizationAlternative';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { OptimizationObjective } from './OptimizationObjective';
import {
    OptimizationObjectiveFromJSON,
    OptimizationObjectiveFromJSONTyped,
    OptimizationObjectiveToJSON,
    OptimizationObjectiveToJSONTyped,
} from './OptimizationObjective';
import type { OptimizationSlot } from './OptimizationSlot';
import {
    OptimizationSlotFromJSON,
    OptimizationSlotFromJSONTyped,
    OptimizationSlotToJSON,
    OptimizationSlotToJSONTyped,
} from './OptimizationSlot';

/**
 * 
 * @export
 * @interface OptimizationResponse
 */
export interface OptimizationResponse {
    /**
     * Canonical UUID identifier.
     * @type {string}
     * @memberof OptimizationResponse
     */
    runId: string;
    /**
     * 
     * @type {Date}
     * @memberof OptimizationResponse
     */
    submittedAt: Date;
    /**
     * 
     * @type {OptimizationObjective}
     * @memberof OptimizationResponse
     */
    objective: OptimizationObjective;
    /**
     * 
     * @type {Array<OptimizationSlot>}
     * @memberof OptimizationResponse
     */
    resultLineup: Array<OptimizationSlot>;
    /**
     * 
     * @type {Array<OptimizationSlot>}
     * @memberof OptimizationResponse
     */
    bench: Array<OptimizationSlot>;
    /**
     * 
     * @type {Array<OptimizationAlternative>}
     * @memberof OptimizationResponse
     */
    alternatives?: Array<OptimizationAlternative>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OptimizationResponse
     */
    insights?: Array<string>;
    /**
     * 
     * @type {Provenance}
     * @memberof OptimizationResponse
     */
    provenance?: Provenance;
}

/**
 * Check if a given object implements the OptimizationResponse interface.
 */
export function instanceOfOptimizationResponse(value: object): value is OptimizationResponse {
    if (!('runId' in value) || value['runId'] === undefined) return false;
    if (!('submittedAt' in value) || value['submittedAt'] === undefined) return false;
    if (!('objective' in value) || value['objective'] === undefined) return false;
    if (!('resultLineup' in value) || value['resultLineup'] === undefined) return false;
    if (!('bench' in value) || value['bench'] === undefined) return false;
    return true;
}

export function OptimizationResponseFromJSON(json: any): OptimizationResponse {
    return OptimizationResponseFromJSONTyped(json, false);
}

export function OptimizationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'runId': json['runId'],
        'submittedAt': (new Date(json['submittedAt'])),
        'objective': OptimizationObjectiveFromJSON(json['objective']),
        'resultLineup': ((json['resultLineup'] as Array<any>).map(OptimizationSlotFromJSON)),
        'bench': ((json['bench'] as Array<any>).map(OptimizationSlotFromJSON)),
        'alternatives': json['alternatives'] == null ? undefined : ((json['alternatives'] as Array<any>).map(OptimizationAlternativeFromJSON)),
        'insights': json['insights'] == null ? undefined : json['insights'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function OptimizationResponseToJSON(json: any): OptimizationResponse {
    return OptimizationResponseToJSONTyped(json, false);
}

export function OptimizationResponseToJSONTyped(value?: OptimizationResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'runId': value['runId'],
        'submittedAt': value['submittedAt'].toISOString(),
        'objective': OptimizationObjectiveToJSON(value['objective']),
        'resultLineup': ((value['resultLineup'] as Array<any>).map(OptimizationSlotToJSON)),
        'bench': ((value['bench'] as Array<any>).map(OptimizationSlotToJSON)),
        'alternatives': value['alternatives'] == null ? undefined : ((value['alternatives'] as Array<any>).map(OptimizationAlternativeToJSON)),
        'insights': value['insights'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

