/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProviderId } from './ProviderId';
import {
    ProviderIdFromJSON,
    ProviderIdFromJSONTyped,
    ProviderIdToJSON,
} from './ProviderId';

/**
 * 
 * @export
 * @interface LinkedAccount
 */
export interface LinkedAccount {
    /**
     * 
     * @type {ProviderId}
     * @memberof LinkedAccount
     */
    provider: ProviderId;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccount
     */
    status: LinkedAccountStatusEnum;
    /**
     * 
     * @type {Array<string>}
     * @memberof LinkedAccount
     */
    scopes: Array<string>;
    /**
     * 
     * @type {Date}
     * @memberof LinkedAccount
     */
    linkedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof LinkedAccount
     */
    lastSyncAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof LinkedAccount
     */
    needsReauth: boolean;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccount
     */
    errorCode?: string;
    /**
     * 
     * @type {string}
     * @memberof LinkedAccount
     */
    errorMessage?: string;
}


/**
 * @export
 */
export const LinkedAccountStatusEnum = {
    Linked: 'linked',
    Pending: 'pending',
    Error: 'error'
} as const;
export type LinkedAccountStatusEnum = typeof LinkedAccountStatusEnum[keyof typeof LinkedAccountStatusEnum];


/**
 * Check if a given object implements the LinkedAccount interface.
 */
export function instanceOfLinkedAccount(value: object): value is LinkedAccount {
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('scopes' in value) || value['scopes'] === undefined) return false;
    if (!('linkedAt' in value) || value['linkedAt'] === undefined) return false;
    if (!('needsReauth' in value) || value['needsReauth'] === undefined) return false;
    return true;
}

export function LinkedAccountFromJSON(json: any): LinkedAccount {
    return LinkedAccountFromJSONTyped(json, false);
}

export function LinkedAccountFromJSONTyped(json: any, ignoreDiscriminator: boolean): LinkedAccount {
    if (json == null) {
        return json;
    }
    return {
        
        'provider': ProviderIdFromJSON(json['provider']),
        'status': json['status'],
        'scopes': json['scopes'],
        'linkedAt': (new Date(json['linkedAt'])),
        'lastSyncAt': json['lastSyncAt'] == null ? undefined : (new Date(json['lastSyncAt'])),
        'needsReauth': json['needsReauth'],
        'errorCode': json['errorCode'] == null ? undefined : json['errorCode'],
        'errorMessage': json['errorMessage'] == null ? undefined : json['errorMessage'],
    };
}

export function LinkedAccountToJSON(value?: LinkedAccount | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'provider': ProviderIdToJSON(value['provider']),
        'status': value['status'],
        'scopes': value['scopes'],
        'linkedAt': ((value['linkedAt']).toISOString()),
        'lastSyncAt': value['lastSyncAt'] == null ? undefined : ((value['lastSyncAt']).toISOString()),
        'needsReauth': value['needsReauth'],
        'errorCode': value['errorCode'],
        'errorMessage': value['errorMessage'],
    };
}

