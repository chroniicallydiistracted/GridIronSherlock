/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { ScopeId } from './ScopeId';
import {
    ScopeIdFromJSON,
    ScopeIdFromJSONTyped,
    ScopeIdToJSON,
    ScopeIdToJSONTyped,
} from './ScopeId';

/**
 * 
 * @export
 * @interface RefreshResponse
 */
export interface RefreshResponse {
    /**
     * 
     * @type {ScopeId}
     * @memberof RefreshResponse
     */
    scope: ScopeId;
    /**
     * 
     * @type {string}
     * @memberof RefreshResponse
     */
    status: RefreshResponseStatusEnum;
    /**
     * 
     * @type {Date}
     * @memberof RefreshResponse
     */
    enqueuedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof RefreshResponse
     */
    estimatedCompletion?: Date;
    /**
     * 
     * @type {object}
     * @memberof RefreshResponse
     */
    context?: object;
    /**
     * 
     * @type {Provenance}
     * @memberof RefreshResponse
     */
    provenance?: Provenance;
}


/**
 * @export
 */
export const RefreshResponseStatusEnum = {
    Queued: 'queued',
    InProgress: 'in-progress',
    Skipped: 'skipped'
} as const;
export type RefreshResponseStatusEnum = typeof RefreshResponseStatusEnum[keyof typeof RefreshResponseStatusEnum];


/**
 * Check if a given object implements the RefreshResponse interface.
 */
export function instanceOfRefreshResponse(value: object): value is RefreshResponse {
    if (!('scope' in value) || value['scope'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('enqueuedAt' in value) || value['enqueuedAt'] === undefined) return false;
    return true;
}

export function RefreshResponseFromJSON(json: any): RefreshResponse {
    return RefreshResponseFromJSONTyped(json, false);
}

export function RefreshResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): RefreshResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'scope': ScopeIdFromJSON(json['scope']),
        'status': json['status'],
        'enqueuedAt': (new Date(json['enqueuedAt'])),
        'estimatedCompletion': json['estimatedCompletion'] == null ? undefined : (new Date(json['estimatedCompletion'])),
        'context': json['context'] == null ? undefined : json['context'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function RefreshResponseToJSON(json: any): RefreshResponse {
    return RefreshResponseToJSONTyped(json, false);
}

export function RefreshResponseToJSONTyped(value?: RefreshResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'scope': ScopeIdToJSON(value['scope']),
        'status': value['status'],
        'enqueuedAt': value['enqueuedAt'].toISOString(),
        'estimatedCompletion': value['estimatedCompletion'] == null ? value['estimatedCompletion'] : value['estimatedCompletion'].toISOString(),
        'context': value['context'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

