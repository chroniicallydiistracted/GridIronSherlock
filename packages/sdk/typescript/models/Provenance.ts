/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Provenance
 */
export interface Provenance {
    /**
     * Data source or model name.
     * @type {string}
     * @memberof Provenance
     */
    source: string;
    /**
     * Timestamp the data was computed.
     * @type {Date}
     * @memberof Provenance
     */
    asOf: Date;
    /**
     * Optional model or dataset version.
     * @type {string}
     * @memberof Provenance
     */
    modelVersion?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Provenance
     */
    notes?: Array<string>;
}

/**
 * Check if a given object implements the Provenance interface.
 */
export function instanceOfProvenance(value: object): value is Provenance {
    if (!('source' in value) || value['source'] === undefined) return false;
    if (!('asOf' in value) || value['asOf'] === undefined) return false;
    return true;
}

export function ProvenanceFromJSON(json: any): Provenance {
    return ProvenanceFromJSONTyped(json, false);
}

export function ProvenanceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Provenance {
    if (json == null) {
        return json;
    }
    return {
        
        'source': json['source'],
        'asOf': (new Date(json['asOf'])),
        'modelVersion': json['modelVersion'] == null ? undefined : json['modelVersion'],
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function ProvenanceToJSON(json: any): Provenance {
    return ProvenanceToJSONTyped(json, false);
}

export function ProvenanceToJSONTyped(value?: Provenance | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'source': value['source'],
        'asOf': value['asOf'].toISOString(),
        'modelVersion': value['modelVersion'],
        'notes': value['notes'],
    };
}

