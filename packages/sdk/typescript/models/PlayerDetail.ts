/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlayerSummary } from './PlayerSummary';
import {
    PlayerSummaryFromJSON,
    PlayerSummaryFromJSONTyped,
    PlayerSummaryToJSON,
} from './PlayerSummary';
import type { RecentGame } from './RecentGame';
import {
    RecentGameFromJSON,
    RecentGameFromJSONTyped,
    RecentGameToJSON,
} from './RecentGame';
import type { PlayerDetailProjections } from './PlayerDetailProjections';
import {
    PlayerDetailProjectionsFromJSON,
    PlayerDetailProjectionsFromJSONTyped,
    PlayerDetailProjectionsToJSON,
} from './PlayerDetailProjections';
import type { PlayerMetrics } from './PlayerMetrics';
import {
    PlayerMetricsFromJSON,
    PlayerMetricsFromJSONTyped,
    PlayerMetricsToJSON,
} from './PlayerMetrics';

/**
 * 
 * @export
 * @interface PlayerDetail
 */
export interface PlayerDetail {
    [key: string]: any | any;
    /**
     * 
     * @type {PlayerSummary}
     * @memberof PlayerDetail
     */
    player: PlayerSummary;
    /**
     * 
     * @type {PlayerMetrics}
     * @memberof PlayerDetail
     */
    metrics: PlayerMetrics;
    /**
     * 
     * @type {PlayerDetailProjections}
     * @memberof PlayerDetail
     */
    projections: PlayerDetailProjections;
    /**
     * 
     * @type {Array<RecentGame>}
     * @memberof PlayerDetail
     */
    recentGames?: Array<RecentGame>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlayerDetail
     */
    insights?: Array<string>;
}

/**
 * Check if a given object implements the PlayerDetail interface.
 */
export function instanceOfPlayerDetail(value: object): value is PlayerDetail {
    if (!('player' in value) || value['player'] === undefined) return false;
    if (!('metrics' in value) || value['metrics'] === undefined) return false;
    if (!('projections' in value) || value['projections'] === undefined) return false;
    return true;
}

export function PlayerDetailFromJSON(json: any): PlayerDetail {
    return PlayerDetailFromJSONTyped(json, false);
}

export function PlayerDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerDetail {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'player': PlayerSummaryFromJSON(json['player']),
        'metrics': PlayerMetricsFromJSON(json['metrics']),
        'projections': PlayerDetailProjectionsFromJSON(json['projections']),
        'recentGames': json['recentGames'] == null ? undefined : ((json['recentGames'] as Array<any>).map(RecentGameFromJSON)),
        'insights': json['insights'] == null ? undefined : json['insights'],
    };
}

export function PlayerDetailToJSON(value?: PlayerDetail | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'player': PlayerSummaryToJSON(value['player']),
        'metrics': PlayerMetricsToJSON(value['metrics']),
        'projections': PlayerDetailProjectionsToJSON(value['projections']),
        'recentGames': value['recentGames'] == null ? undefined : ((value['recentGames'] as Array<any>).map(RecentGameToJSON)),
        'insights': value['insights'],
    };
}

