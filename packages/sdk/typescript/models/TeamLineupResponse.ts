/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TeamReference } from './TeamReference';
import {
    TeamReferenceFromJSON,
    TeamReferenceFromJSONTyped,
    TeamReferenceToJSON,
    TeamReferenceToJSONTyped,
} from './TeamReference';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { LineupSlot } from './LineupSlot';
import {
    LineupSlotFromJSON,
    LineupSlotFromJSONTyped,
    LineupSlotToJSON,
    LineupSlotToJSONTyped,
} from './LineupSlot';
import type { ScoringPeriod } from './ScoringPeriod';
import {
    ScoringPeriodFromJSON,
    ScoringPeriodFromJSONTyped,
    ScoringPeriodToJSON,
    ScoringPeriodToJSONTyped,
} from './ScoringPeriod';

/**
 * 
 * @export
 * @interface TeamLineupResponse
 */
export interface TeamLineupResponse {
    /**
     * 
     * @type {TeamReference}
     * @memberof TeamLineupResponse
     */
    team: TeamReference;
    /**
     * 
     * @type {ScoringPeriod}
     * @memberof TeamLineupResponse
     */
    period: ScoringPeriod;
    /**
     * 
     * @type {Array<LineupSlot>}
     * @memberof TeamLineupResponse
     */
    lineup: Array<LineupSlot>;
    /**
     * 
     * @type {Array<LineupSlot>}
     * @memberof TeamLineupResponse
     */
    bench: Array<LineupSlot>;
    /**
     * 
     * @type {number}
     * @memberof TeamLineupResponse
     */
    totalProjected?: number;
    /**
     * 
     * @type {number}
     * @memberof TeamLineupResponse
     */
    totalActual?: number;
    /**
     * 
     * @type {Provenance}
     * @memberof TeamLineupResponse
     */
    provenance?: Provenance;
}

/**
 * Check if a given object implements the TeamLineupResponse interface.
 */
export function instanceOfTeamLineupResponse(value: object): value is TeamLineupResponse {
    if (!('team' in value) || value['team'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('lineup' in value) || value['lineup'] === undefined) return false;
    if (!('bench' in value) || value['bench'] === undefined) return false;
    return true;
}

export function TeamLineupResponseFromJSON(json: any): TeamLineupResponse {
    return TeamLineupResponseFromJSONTyped(json, false);
}

export function TeamLineupResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamLineupResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'team': TeamReferenceFromJSON(json['team']),
        'period': ScoringPeriodFromJSON(json['period']),
        'lineup': ((json['lineup'] as Array<any>).map(LineupSlotFromJSON)),
        'bench': ((json['bench'] as Array<any>).map(LineupSlotFromJSON)),
        'totalProjected': json['totalProjected'] == null ? undefined : json['totalProjected'],
        'totalActual': json['totalActual'] == null ? undefined : json['totalActual'],
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function TeamLineupResponseToJSON(json: any): TeamLineupResponse {
    return TeamLineupResponseToJSONTyped(json, false);
}

export function TeamLineupResponseToJSONTyped(value?: TeamLineupResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'team': TeamReferenceToJSON(value['team']),
        'period': ScoringPeriodToJSON(value['period']),
        'lineup': ((value['lineup'] as Array<any>).map(LineupSlotToJSON)),
        'bench': ((value['bench'] as Array<any>).map(LineupSlotToJSON)),
        'totalProjected': value['totalProjected'],
        'totalActual': value['totalActual'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

