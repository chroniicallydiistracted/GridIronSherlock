/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProviderId } from './ProviderId';
import {
    ProviderIdFromJSON,
    ProviderIdFromJSONTyped,
    ProviderIdToJSON,
} from './ProviderId';
import type { AccountLinkResponsePkce } from './AccountLinkResponsePkce';
import {
    AccountLinkResponsePkceFromJSON,
    AccountLinkResponsePkceFromJSONTyped,
    AccountLinkResponsePkceToJSON,
} from './AccountLinkResponsePkce';

/**
 * 
 * @export
 * @interface AccountLinkResponse
 */
export interface AccountLinkResponse {
    [key: string]: any | any;
    /**
     * 
     * @type {ProviderId}
     * @memberof AccountLinkResponse
     */
    provider: ProviderId;
    /**
     * 
     * @type {string}
     * @memberof AccountLinkResponse
     */
    authorizationUrl: string;
    /**
     * 
     * @type {string}
     * @memberof AccountLinkResponse
     */
    state: string;
    /**
     * 
     * @type {Date}
     * @memberof AccountLinkResponse
     */
    expiresAt: Date;
    /**
     * 
     * @type {AccountLinkResponsePkce}
     * @memberof AccountLinkResponse
     */
    pkce?: AccountLinkResponsePkce;
}

/**
 * Check if a given object implements the AccountLinkResponse interface.
 */
export function instanceOfAccountLinkResponse(value: object): value is AccountLinkResponse {
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('authorizationUrl' in value) || value['authorizationUrl'] === undefined) return false;
    if (!('state' in value) || value['state'] === undefined) return false;
    if (!('expiresAt' in value) || value['expiresAt'] === undefined) return false;
    return true;
}

export function AccountLinkResponseFromJSON(json: any): AccountLinkResponse {
    return AccountLinkResponseFromJSONTyped(json, false);
}

export function AccountLinkResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AccountLinkResponse {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'provider': ProviderIdFromJSON(json['provider']),
        'authorizationUrl': json['authorizationUrl'],
        'state': json['state'],
        'expiresAt': (new Date(json['expiresAt'])),
        'pkce': json['pkce'] == null ? undefined : AccountLinkResponsePkceFromJSON(json['pkce']),
    };
}

export function AccountLinkResponseToJSON(value?: AccountLinkResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'provider': ProviderIdToJSON(value['provider']),
        'authorizationUrl': value['authorizationUrl'],
        'state': value['state'],
        'expiresAt': ((value['expiresAt']).toISOString()),
        'pkce': AccountLinkResponsePkceToJSON(value['pkce']),
    };
}

