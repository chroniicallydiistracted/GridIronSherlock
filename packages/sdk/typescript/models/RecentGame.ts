/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecentGame
 */
export interface RecentGame {
    /**
     * 
     * @type {number}
     * @memberof RecentGame
     */
    season: number;
    /**
     * 
     * @type {number}
     * @memberof RecentGame
     */
    week: number;
    /**
     * 
     * @type {string}
     * @memberof RecentGame
     */
    opponent: string;
    /**
     * 
     * @type {number}
     * @memberof RecentGame
     */
    fantasyPoints?: number;
    /**
     * 
     * @type {number}
     * @memberof RecentGame
     */
    snapShare?: number;
    /**
     * 
     * @type {string}
     * @memberof RecentGame
     */
    notes?: string;
}

/**
 * Check if a given object implements the RecentGame interface.
 */
export function instanceOfRecentGame(value: object): value is RecentGame {
    if (!('season' in value) || value['season'] === undefined) return false;
    if (!('week' in value) || value['week'] === undefined) return false;
    if (!('opponent' in value) || value['opponent'] === undefined) return false;
    return true;
}

export function RecentGameFromJSON(json: any): RecentGame {
    return RecentGameFromJSONTyped(json, false);
}

export function RecentGameFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecentGame {
    if (json == null) {
        return json;
    }
    return {
        
        'season': json['season'],
        'week': json['week'],
        'opponent': json['opponent'],
        'fantasyPoints': json['fantasyPoints'] == null ? undefined : json['fantasyPoints'],
        'snapShare': json['snapShare'] == null ? undefined : json['snapShare'],
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function RecentGameToJSON(json: any): RecentGame {
    return RecentGameToJSONTyped(json, false);
}

export function RecentGameToJSONTyped(value?: RecentGame | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'season': value['season'],
        'week': value['week'],
        'opponent': value['opponent'],
        'fantasyPoints': value['fantasyPoints'],
        'snapShare': value['snapShare'],
        'notes': value['notes'],
    };
}

