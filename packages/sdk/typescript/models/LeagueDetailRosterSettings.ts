/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RosterSlotRule } from './RosterSlotRule';
import {
    RosterSlotRuleFromJSON,
    RosterSlotRuleFromJSONTyped,
    RosterSlotRuleToJSON,
    RosterSlotRuleToJSONTyped,
} from './RosterSlotRule';

/**
 * 
 * @export
 * @interface LeagueDetailRosterSettings
 */
export interface LeagueDetailRosterSettings {
    /**
     * 
     * @type {Array<RosterSlotRule>}
     * @memberof LeagueDetailRosterSettings
     */
    slots: Array<RosterSlotRule>;
    /**
     * 
     * @type {number}
     * @memberof LeagueDetailRosterSettings
     */
    benchSlots: number;
    /**
     * 
     * @type {number}
     * @memberof LeagueDetailRosterSettings
     */
    irSlots?: number;
    /**
     * 
     * @type {string}
     * @memberof LeagueDetailRosterSettings
     */
    notes?: string;
}

/**
 * Check if a given object implements the LeagueDetailRosterSettings interface.
 */
export function instanceOfLeagueDetailRosterSettings(value: object): value is LeagueDetailRosterSettings {
    if (!('slots' in value) || value['slots'] === undefined) return false;
    if (!('benchSlots' in value) || value['benchSlots'] === undefined) return false;
    return true;
}

export function LeagueDetailRosterSettingsFromJSON(json: any): LeagueDetailRosterSettings {
    return LeagueDetailRosterSettingsFromJSONTyped(json, false);
}

export function LeagueDetailRosterSettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeagueDetailRosterSettings {
    if (json == null) {
        return json;
    }
    return {
        
        'slots': ((json['slots'] as Array<any>).map(RosterSlotRuleFromJSON)),
        'benchSlots': json['benchSlots'],
        'irSlots': json['irSlots'] == null ? undefined : json['irSlots'],
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function LeagueDetailRosterSettingsToJSON(json: any): LeagueDetailRosterSettings {
    return LeagueDetailRosterSettingsToJSONTyped(json, false);
}

export function LeagueDetailRosterSettingsToJSONTyped(value?: LeagueDetailRosterSettings | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'slots': ((value['slots'] as Array<any>).map(RosterSlotRuleToJSON)),
        'benchSlots': value['benchSlots'],
        'irSlots': value['irSlots'],
        'notes': value['notes'],
    };
}

