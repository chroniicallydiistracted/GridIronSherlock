/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptimizationConstraints } from './OptimizationConstraints';
import {
    OptimizationConstraintsFromJSON,
    OptimizationConstraintsFromJSONTyped,
    OptimizationConstraintsToJSON,
    OptimizationConstraintsToJSONTyped,
} from './OptimizationConstraints';
import type { OptimizationObjective } from './OptimizationObjective';
import {
    OptimizationObjectiveFromJSON,
    OptimizationObjectiveFromJSONTyped,
    OptimizationObjectiveToJSON,
    OptimizationObjectiveToJSONTyped,
} from './OptimizationObjective';
import type { ScoringPeriod } from './ScoringPeriod';
import {
    ScoringPeriodFromJSON,
    ScoringPeriodFromJSONTyped,
    ScoringPeriodToJSON,
    ScoringPeriodToJSONTyped,
} from './ScoringPeriod';
import type { OptimizationRequestContext } from './OptimizationRequestContext';
import {
    OptimizationRequestContextFromJSON,
    OptimizationRequestContextFromJSONTyped,
    OptimizationRequestContextToJSON,
    OptimizationRequestContextToJSONTyped,
} from './OptimizationRequestContext';

/**
 * 
 * @export
 * @interface OptimizationRequest
 */
export interface OptimizationRequest {
    /**
     * 
     * @type {ScoringPeriod}
     * @memberof OptimizationRequest
     */
    period: ScoringPeriod;
    /**
     * 
     * @type {OptimizationObjective}
     * @memberof OptimizationRequest
     */
    objective: OptimizationObjective;
    /**
     * 
     * @type {OptimizationConstraints}
     * @memberof OptimizationRequest
     */
    constraints?: OptimizationConstraints;
    /**
     * 
     * @type {OptimizationRequestContext}
     * @memberof OptimizationRequest
     */
    context?: OptimizationRequestContext;
}

/**
 * Check if a given object implements the OptimizationRequest interface.
 */
export function instanceOfOptimizationRequest(value: object): value is OptimizationRequest {
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('objective' in value) || value['objective'] === undefined) return false;
    return true;
}

export function OptimizationRequestFromJSON(json: any): OptimizationRequest {
    return OptimizationRequestFromJSONTyped(json, false);
}

export function OptimizationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'period': ScoringPeriodFromJSON(json['period']),
        'objective': OptimizationObjectiveFromJSON(json['objective']),
        'constraints': json['constraints'] == null ? undefined : OptimizationConstraintsFromJSON(json['constraints']),
        'context': json['context'] == null ? undefined : OptimizationRequestContextFromJSON(json['context']),
    };
}

export function OptimizationRequestToJSON(json: any): OptimizationRequest {
    return OptimizationRequestToJSONTyped(json, false);
}

export function OptimizationRequestToJSONTyped(value?: OptimizationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'period': ScoringPeriodToJSON(value['period']),
        'objective': OptimizationObjectiveToJSON(value['objective']),
        'constraints': OptimizationConstraintsToJSON(value['constraints']),
        'context': OptimizationRequestContextToJSON(value['context']),
    };
}

