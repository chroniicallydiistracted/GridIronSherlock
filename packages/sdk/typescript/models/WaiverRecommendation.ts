/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WaiverRecommendationReplacementComparison } from './WaiverRecommendationReplacementComparison';
import {
    WaiverRecommendationReplacementComparisonFromJSON,
    WaiverRecommendationReplacementComparisonFromJSONTyped,
    WaiverRecommendationReplacementComparisonToJSON,
} from './WaiverRecommendationReplacementComparison';
import type { PlayerSummary } from './PlayerSummary';
import {
    PlayerSummaryFromJSON,
    PlayerSummaryFromJSONTyped,
    PlayerSummaryToJSON,
} from './PlayerSummary';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
} from './Provenance';
import type { FAABRange } from './FAABRange';
import {
    FAABRangeFromJSON,
    FAABRangeFromJSONTyped,
    FAABRangeToJSON,
} from './FAABRange';

/**
 * 
 * @export
 * @interface WaiverRecommendation
 */
export interface WaiverRecommendation {
    [key: string]: any | any;
    /**
     * 
     * @type {PlayerSummary}
     * @memberof WaiverRecommendation
     */
    player: PlayerSummary;
    /**
     * 
     * @type {number}
     * @memberof WaiverRecommendation
     */
    projectedPoints: number;
    /**
     * 
     * @type {FAABRange}
     * @memberof WaiverRecommendation
     */
    faab: FAABRange;
    /**
     * 
     * @type {number}
     * @memberof WaiverRecommendation
     */
    priority: number;
    /**
     * 
     * @type {string}
     * @memberof WaiverRecommendation
     */
    recommendedAction: WaiverRecommendationRecommendedActionEnum;
    /**
     * 
     * @type {string}
     * @memberof WaiverRecommendation
     */
    reason?: string;
    /**
     * 
     * @type {WaiverRecommendationReplacementComparison}
     * @memberof WaiverRecommendation
     */
    replacementComparison?: WaiverRecommendationReplacementComparison;
    /**
     * 
     * @type {Provenance}
     * @memberof WaiverRecommendation
     */
    provenance?: Provenance;
}


/**
 * @export
 */
export const WaiverRecommendationRecommendedActionEnum = {
    Add: 'add',
    Monitor: 'monitor',
    Avoid: 'avoid'
} as const;
export type WaiverRecommendationRecommendedActionEnum = typeof WaiverRecommendationRecommendedActionEnum[keyof typeof WaiverRecommendationRecommendedActionEnum];


/**
 * Check if a given object implements the WaiverRecommendation interface.
 */
export function instanceOfWaiverRecommendation(value: object): value is WaiverRecommendation {
    if (!('player' in value) || value['player'] === undefined) return false;
    if (!('projectedPoints' in value) || value['projectedPoints'] === undefined) return false;
    if (!('faab' in value) || value['faab'] === undefined) return false;
    if (!('priority' in value) || value['priority'] === undefined) return false;
    if (!('recommendedAction' in value) || value['recommendedAction'] === undefined) return false;
    return true;
}

export function WaiverRecommendationFromJSON(json: any): WaiverRecommendation {
    return WaiverRecommendationFromJSONTyped(json, false);
}

export function WaiverRecommendationFromJSONTyped(json: any, ignoreDiscriminator: boolean): WaiverRecommendation {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'player': PlayerSummaryFromJSON(json['player']),
        'projectedPoints': json['projectedPoints'],
        'faab': FAABRangeFromJSON(json['faab']),
        'priority': json['priority'],
        'recommendedAction': json['recommendedAction'],
        'reason': json['reason'] == null ? undefined : json['reason'],
        'replacementComparison': json['replacementComparison'] == null ? undefined : WaiverRecommendationReplacementComparisonFromJSON(json['replacementComparison']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function WaiverRecommendationToJSON(value?: WaiverRecommendation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'player': PlayerSummaryToJSON(value['player']),
        'projectedPoints': value['projectedPoints'],
        'faab': FAABRangeToJSON(value['faab']),
        'priority': value['priority'],
        'recommendedAction': value['recommendedAction'],
        'reason': value['reason'],
        'replacementComparison': WaiverRecommendationReplacementComparisonToJSON(value['replacementComparison']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

