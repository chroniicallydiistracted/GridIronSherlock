/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { UserProfilePreferences } from './UserProfilePreferences';
import {
    UserProfilePreferencesFromJSON,
    UserProfilePreferencesFromJSONTyped,
    UserProfilePreferencesToJSON,
} from './UserProfilePreferences';
import type { LinkedAccount } from './LinkedAccount';
import {
    LinkedAccountFromJSON,
    LinkedAccountFromJSONTyped,
    LinkedAccountToJSON,
} from './LinkedAccount';

/**
 * 
 * @export
 * @interface UserProfile
 */
export interface UserProfile {
    [key: string]: any | any;
    /**
     * Canonical UUID identifier.
     * @type {string}
     * @memberof UserProfile
     */
    userId: string;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    email: string;
    /**
     * 
     * @type {Date}
     * @memberof UserProfile
     */
    createdAt: Date;
    /**
     * 
     * @type {string}
     * @memberof UserProfile
     */
    displayName?: string;
    /**
     * 
     * @type {Array<LinkedAccount>}
     * @memberof UserProfile
     */
    accounts: Array<LinkedAccount>;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfile
     */
    activeLeagueIds: Array<string>;
    /**
     * 
     * @type {UserProfilePreferences}
     * @memberof UserProfile
     */
    preferences?: UserProfilePreferences;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserProfile
     */
    featureFlags?: Array<string>;
}

/**
 * Check if a given object implements the UserProfile interface.
 */
export function instanceOfUserProfile(value: object): value is UserProfile {
    if (!('userId' in value) || value['userId'] === undefined) return false;
    if (!('email' in value) || value['email'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('accounts' in value) || value['accounts'] === undefined) return false;
    if (!('activeLeagueIds' in value) || value['activeLeagueIds'] === undefined) return false;
    return true;
}

export function UserProfileFromJSON(json: any): UserProfile {
    return UserProfileFromJSONTyped(json, false);
}

export function UserProfileFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserProfile {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'userId': json['userId'],
        'email': json['email'],
        'createdAt': (new Date(json['createdAt'])),
        'displayName': json['displayName'] == null ? undefined : json['displayName'],
        'accounts': ((json['accounts'] as Array<any>).map(LinkedAccountFromJSON)),
        'activeLeagueIds': json['activeLeagueIds'],
        'preferences': json['preferences'] == null ? undefined : UserProfilePreferencesFromJSON(json['preferences']),
        'featureFlags': json['featureFlags'] == null ? undefined : json['featureFlags'],
    };
}

export function UserProfileToJSON(value?: UserProfile | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'userId': value['userId'],
        'email': value['email'],
        'createdAt': ((value['createdAt']).toISOString()),
        'displayName': value['displayName'],
        'accounts': ((value['accounts'] as Array<any>).map(LinkedAccountToJSON)),
        'activeLeagueIds': value['activeLeagueIds'],
        'preferences': UserProfilePreferencesToJSON(value['preferences']),
        'featureFlags': value['featureFlags'],
    };
}

