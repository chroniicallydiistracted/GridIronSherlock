/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlayerSummary } from './PlayerSummary';
import {
    PlayerSummaryFromJSON,
    PlayerSummaryFromJSONTyped,
    PlayerSummaryToJSON,
} from './PlayerSummary';
import type { ProjectionSummary } from './ProjectionSummary';
import {
    ProjectionSummaryFromJSON,
    ProjectionSummaryFromJSONTyped,
    ProjectionSummaryToJSON,
} from './ProjectionSummary';

/**
 * 
 * @export
 * @interface LineupSlot
 */
export interface LineupSlot {
    /**
     * 
     * @type {string}
     * @memberof LineupSlot
     */
    slot: string;
    /**
     * 
     * @type {PlayerSummary}
     * @memberof LineupSlot
     */
    player: PlayerSummary;
    /**
     * 
     * @type {ProjectionSummary}
     * @memberof LineupSlot
     */
    projected: ProjectionSummary;
    /**
     * 
     * @type {string}
     * @memberof LineupSlot
     */
    status?: LineupSlotStatusEnum;
    /**
     * 
     * @type {number}
     * @memberof LineupSlot
     */
    actualPoints?: number;
    /**
     * 
     * @type {string}
     * @memberof LineupSlot
     */
    notes?: string;
}


/**
 * @export
 */
export const LineupSlotStatusEnum = {
    Starting: 'starting',
    Bench: 'bench',
    Locked: 'locked',
    Inactive: 'inactive'
} as const;
export type LineupSlotStatusEnum = typeof LineupSlotStatusEnum[keyof typeof LineupSlotStatusEnum];


/**
 * Check if a given object implements the LineupSlot interface.
 */
export function instanceOfLineupSlot(value: object): value is LineupSlot {
    if (!('slot' in value) || value['slot'] === undefined) return false;
    if (!('player' in value) || value['player'] === undefined) return false;
    if (!('projected' in value) || value['projected'] === undefined) return false;
    return true;
}

export function LineupSlotFromJSON(json: any): LineupSlot {
    return LineupSlotFromJSONTyped(json, false);
}

export function LineupSlotFromJSONTyped(json: any, ignoreDiscriminator: boolean): LineupSlot {
    if (json == null) {
        return json;
    }
    return {
        
        'slot': json['slot'],
        'player': PlayerSummaryFromJSON(json['player']),
        'projected': ProjectionSummaryFromJSON(json['projected']),
        'status': json['status'] == null ? undefined : json['status'],
        'actualPoints': json['actualPoints'] == null ? undefined : json['actualPoints'],
        'notes': json['notes'] == null ? undefined : json['notes'],
    };
}

export function LineupSlotToJSON(value?: LineupSlot | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'slot': value['slot'],
        'player': PlayerSummaryToJSON(value['player']),
        'projected': ProjectionSummaryToJSON(value['projected']),
        'status': value['status'],
        'actualPoints': value['actualPoints'],
        'notes': value['notes'],
    };
}

