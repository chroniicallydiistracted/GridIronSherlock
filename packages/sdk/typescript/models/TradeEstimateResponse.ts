/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TradeEstimateResponseReplacementImpact } from './TradeEstimateResponseReplacementImpact';
import {
    TradeEstimateResponseReplacementImpactFromJSON,
    TradeEstimateResponseReplacementImpactFromJSONTyped,
    TradeEstimateResponseReplacementImpactToJSON,
    TradeEstimateResponseReplacementImpactToJSONTyped,
} from './TradeEstimateResponseReplacementImpact';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { TradeImpact } from './TradeImpact';
import {
    TradeImpactFromJSON,
    TradeImpactFromJSONTyped,
    TradeImpactToJSON,
    TradeImpactToJSONTyped,
} from './TradeImpact';

/**
 * 
 * @export
 * @interface TradeEstimateResponse
 */
export interface TradeEstimateResponse {
    /**
     * 
     * @type {number}
     * @memberof TradeEstimateResponse
     */
    fairnessScore: number;
    /**
     * 
     * @type {string}
     * @memberof TradeEstimateResponse
     */
    recommendedAction: TradeEstimateResponseRecommendedActionEnum;
    /**
     * 
     * @type {string}
     * @memberof TradeEstimateResponse
     */
    summary?: string;
    /**
     * 
     * @type {Array<TradeImpact>}
     * @memberof TradeEstimateResponse
     */
    teamImpacts: Array<TradeImpact>;
    /**
     * 
     * @type {TradeEstimateResponseReplacementImpact}
     * @memberof TradeEstimateResponse
     */
    replacementImpact?: TradeEstimateResponseReplacementImpact;
    /**
     * 
     * @type {Array<string>}
     * @memberof TradeEstimateResponse
     */
    warnings?: Array<string>;
    /**
     * 
     * @type {Provenance}
     * @memberof TradeEstimateResponse
     */
    provenance: Provenance;
}


/**
 * @export
 */
export const TradeEstimateResponseRecommendedActionEnum = {
    Proceed: 'proceed',
    Counter: 'counter',
    Decline: 'decline'
} as const;
export type TradeEstimateResponseRecommendedActionEnum = typeof TradeEstimateResponseRecommendedActionEnum[keyof typeof TradeEstimateResponseRecommendedActionEnum];


/**
 * Check if a given object implements the TradeEstimateResponse interface.
 */
export function instanceOfTradeEstimateResponse(value: object): value is TradeEstimateResponse {
    if (!('fairnessScore' in value) || value['fairnessScore'] === undefined) return false;
    if (!('recommendedAction' in value) || value['recommendedAction'] === undefined) return false;
    if (!('teamImpacts' in value) || value['teamImpacts'] === undefined) return false;
    if (!('provenance' in value) || value['provenance'] === undefined) return false;
    return true;
}

export function TradeEstimateResponseFromJSON(json: any): TradeEstimateResponse {
    return TradeEstimateResponseFromJSONTyped(json, false);
}

export function TradeEstimateResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): TradeEstimateResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'fairnessScore': json['fairnessScore'],
        'recommendedAction': json['recommendedAction'],
        'summary': json['summary'] == null ? undefined : json['summary'],
        'teamImpacts': ((json['teamImpacts'] as Array<any>).map(TradeImpactFromJSON)),
        'replacementImpact': json['replacementImpact'] == null ? undefined : TradeEstimateResponseReplacementImpactFromJSON(json['replacementImpact']),
        'warnings': json['warnings'] == null ? undefined : json['warnings'],
        'provenance': ProvenanceFromJSON(json['provenance']),
    };
}

export function TradeEstimateResponseToJSON(json: any): TradeEstimateResponse {
    return TradeEstimateResponseToJSONTyped(json, false);
}

export function TradeEstimateResponseToJSONTyped(value?: TradeEstimateResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'fairnessScore': value['fairnessScore'],
        'recommendedAction': value['recommendedAction'],
        'summary': value['summary'],
        'teamImpacts': ((value['teamImpacts'] as Array<any>).map(TradeImpactToJSON)),
        'replacementImpact': TradeEstimateResponseReplacementImpactToJSON(value['replacementImpact']),
        'warnings': value['warnings'],
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

