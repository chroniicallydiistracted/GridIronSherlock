/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TeamReferenceRecord } from './TeamReferenceRecord';
import {
    TeamReferenceRecordFromJSON,
    TeamReferenceRecordFromJSONTyped,
    TeamReferenceRecordToJSON,
    TeamReferenceRecordToJSONTyped,
} from './TeamReferenceRecord';

/**
 * 
 * @export
 * @interface TeamReference
 */
export interface TeamReference {
    /**
     * 
     * @type {string}
     * @memberof TeamReference
     */
    teamId: string;
    /**
     * 
     * @type {string}
     * @memberof TeamReference
     */
    leagueId: string;
    /**
     * 
     * @type {string}
     * @memberof TeamReference
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof TeamReference
     */
    abbreviation?: string;
    /**
     * 
     * @type {string}
     * @memberof TeamReference
     */
    manager?: string;
    /**
     * 
     * @type {TeamReferenceRecord}
     * @memberof TeamReference
     */
    record?: TeamReferenceRecord;
}

/**
 * Check if a given object implements the TeamReference interface.
 */
export function instanceOfTeamReference(value: object): value is TeamReference {
    if (!('teamId' in value) || value['teamId'] === undefined) return false;
    if (!('leagueId' in value) || value['leagueId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    return true;
}

export function TeamReferenceFromJSON(json: any): TeamReference {
    return TeamReferenceFromJSONTyped(json, false);
}

export function TeamReferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): TeamReference {
    if (json == null) {
        return json;
    }
    return {
        
        'teamId': json['teamId'],
        'leagueId': json['leagueId'],
        'name': json['name'],
        'abbreviation': json['abbreviation'] == null ? undefined : json['abbreviation'],
        'manager': json['manager'] == null ? undefined : json['manager'],
        'record': json['record'] == null ? undefined : TeamReferenceRecordFromJSON(json['record']),
    };
}

export function TeamReferenceToJSON(json: any): TeamReference {
    return TeamReferenceToJSONTyped(json, false);
}

export function TeamReferenceToJSONTyped(value?: TeamReference | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'teamId': value['teamId'],
        'leagueId': value['leagueId'],
        'name': value['name'],
        'abbreviation': value['abbreviation'],
        'manager': value['manager'],
        'record': TeamReferenceRecordToJSON(value['record']),
    };
}

