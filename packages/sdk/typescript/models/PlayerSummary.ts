/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
} from './Provenance';
import type { InjuryStatus } from './InjuryStatus';
import {
    InjuryStatusFromJSON,
    InjuryStatusFromJSONTyped,
    InjuryStatusToJSON,
} from './InjuryStatus';

/**
 * 
 * @export
 * @interface PlayerSummary
 */
export interface PlayerSummary {
    /**
     * 
     * @type {string}
     * @memberof PlayerSummary
     */
    playerId: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSummary
     */
    gsisId?: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSummary
     */
    fullName: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSummary
     */
    position: string;
    /**
     * 
     * @type {string}
     * @memberof PlayerSummary
     */
    team: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerSummary
     */
    byeWeek?: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerSummary
     */
    age?: number;
    /**
     * 
     * @type {InjuryStatus}
     * @memberof PlayerSummary
     */
    injury?: InjuryStatus;
    /**
     * 
     * @type {Provenance}
     * @memberof PlayerSummary
     */
    provenance?: Provenance;
}

/**
 * Check if a given object implements the PlayerSummary interface.
 */
export function instanceOfPlayerSummary(value: object): value is PlayerSummary {
    if (!('playerId' in value) || value['playerId'] === undefined) return false;
    if (!('fullName' in value) || value['fullName'] === undefined) return false;
    if (!('position' in value) || value['position'] === undefined) return false;
    if (!('team' in value) || value['team'] === undefined) return false;
    return true;
}

export function PlayerSummaryFromJSON(json: any): PlayerSummary {
    return PlayerSummaryFromJSONTyped(json, false);
}

export function PlayerSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'playerId': json['playerId'],
        'gsisId': json['gsisId'] == null ? undefined : json['gsisId'],
        'fullName': json['fullName'],
        'position': json['position'],
        'team': json['team'],
        'byeWeek': json['byeWeek'] == null ? undefined : json['byeWeek'],
        'age': json['age'] == null ? undefined : json['age'],
        'injury': json['injury'] == null ? undefined : InjuryStatusFromJSON(json['injury']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function PlayerSummaryToJSON(value?: PlayerSummary | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'playerId': value['playerId'],
        'gsisId': value['gsisId'],
        'fullName': value['fullName'],
        'position': value['position'],
        'team': value['team'],
        'byeWeek': value['byeWeek'],
        'age': value['age'],
        'injury': InjuryStatusToJSON(value['injury']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

