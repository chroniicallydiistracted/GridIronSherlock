/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProjectionRecordOpponent } from './ProjectionRecordOpponent';
import {
    ProjectionRecordOpponentFromJSON,
    ProjectionRecordOpponentFromJSONTyped,
    ProjectionRecordOpponentToJSON,
    ProjectionRecordOpponentToJSONTyped,
} from './ProjectionRecordOpponent';
import type { PlayerSummary } from './PlayerSummary';
import {
    PlayerSummaryFromJSON,
    PlayerSummaryFromJSONTyped,
    PlayerSummaryToJSON,
    PlayerSummaryToJSONTyped,
} from './PlayerSummary';
import type { ProjectionSummary } from './ProjectionSummary';
import {
    ProjectionSummaryFromJSON,
    ProjectionSummaryFromJSONTyped,
    ProjectionSummaryToJSON,
    ProjectionSummaryToJSONTyped,
} from './ProjectionSummary';
import type { ScoringPeriod } from './ScoringPeriod';
import {
    ScoringPeriodFromJSON,
    ScoringPeriodFromJSONTyped,
    ScoringPeriodToJSON,
    ScoringPeriodToJSONTyped,
} from './ScoringPeriod';
import type { ProjectionRecordUsage } from './ProjectionRecordUsage';
import {
    ProjectionRecordUsageFromJSON,
    ProjectionRecordUsageFromJSONTyped,
    ProjectionRecordUsageToJSON,
    ProjectionRecordUsageToJSONTyped,
} from './ProjectionRecordUsage';

/**
 * 
 * @export
 * @interface ProjectionRecord
 */
export interface ProjectionRecord {
    /**
     * 
     * @type {PlayerSummary}
     * @memberof ProjectionRecord
     */
    player: PlayerSummary;
    /**
     * 
     * @type {ScoringPeriod}
     * @memberof ProjectionRecord
     */
    period: ScoringPeriod;
    /**
     * Canonical UUID identifier.
     * @type {string}
     * @memberof ProjectionRecord
     */
    leagueId?: string;
    /**
     * 
     * @type {ProjectionSummary}
     * @memberof ProjectionRecord
     */
    projection: ProjectionSummary;
    /**
     * 
     * @type {ProjectionRecordOpponent}
     * @memberof ProjectionRecord
     */
    opponent?: ProjectionRecordOpponent;
    /**
     * 
     * @type {ProjectionRecordUsage}
     * @memberof ProjectionRecord
     */
    usage?: ProjectionRecordUsage;
}

/**
 * Check if a given object implements the ProjectionRecord interface.
 */
export function instanceOfProjectionRecord(value: object): value is ProjectionRecord {
    if (!('player' in value) || value['player'] === undefined) return false;
    if (!('period' in value) || value['period'] === undefined) return false;
    if (!('projection' in value) || value['projection'] === undefined) return false;
    return true;
}

export function ProjectionRecordFromJSON(json: any): ProjectionRecord {
    return ProjectionRecordFromJSONTyped(json, false);
}

export function ProjectionRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProjectionRecord {
    if (json == null) {
        return json;
    }
    return {
        
        'player': PlayerSummaryFromJSON(json['player']),
        'period': ScoringPeriodFromJSON(json['period']),
        'leagueId': json['leagueId'] == null ? undefined : json['leagueId'],
        'projection': ProjectionSummaryFromJSON(json['projection']),
        'opponent': json['opponent'] == null ? undefined : ProjectionRecordOpponentFromJSON(json['opponent']),
        'usage': json['usage'] == null ? undefined : ProjectionRecordUsageFromJSON(json['usage']),
    };
}

export function ProjectionRecordToJSON(json: any): ProjectionRecord {
    return ProjectionRecordToJSONTyped(json, false);
}

export function ProjectionRecordToJSONTyped(value?: ProjectionRecord | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'player': PlayerSummaryToJSON(value['player']),
        'period': ScoringPeriodToJSON(value['period']),
        'leagueId': value['leagueId'],
        'projection': ProjectionSummaryToJSON(value['projection']),
        'opponent': ProjectionRecordOpponentToJSON(value['opponent']),
        'usage': ProjectionRecordUsageToJSON(value['usage']),
    };
}

