/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PlayerMetricsEfficiency } from './PlayerMetricsEfficiency';
import {
    PlayerMetricsEfficiencyFromJSON,
    PlayerMetricsEfficiencyFromJSONTyped,
    PlayerMetricsEfficiencyToJSON,
    PlayerMetricsEfficiencyToJSONTyped,
} from './PlayerMetricsEfficiency';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { PlayerMetricsContext } from './PlayerMetricsContext';
import {
    PlayerMetricsContextFromJSON,
    PlayerMetricsContextFromJSONTyped,
    PlayerMetricsContextToJSON,
    PlayerMetricsContextToJSONTyped,
} from './PlayerMetricsContext';
import type { PlayerMetricsUsage } from './PlayerMetricsUsage';
import {
    PlayerMetricsUsageFromJSON,
    PlayerMetricsUsageFromJSONTyped,
    PlayerMetricsUsageToJSON,
    PlayerMetricsUsageToJSONTyped,
} from './PlayerMetricsUsage';

/**
 * 
 * @export
 * @interface PlayerMetrics
 */
export interface PlayerMetrics {
    /**
     * 
     * @type {number}
     * @memberof PlayerMetrics
     */
    season: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerMetrics
     */
    week: number;
    /**
     * 
     * @type {PlayerMetricsUsage}
     * @memberof PlayerMetrics
     */
    usage?: PlayerMetricsUsage;
    /**
     * 
     * @type {PlayerMetricsEfficiency}
     * @memberof PlayerMetrics
     */
    efficiency?: PlayerMetricsEfficiency;
    /**
     * 
     * @type {PlayerMetricsContext}
     * @memberof PlayerMetrics
     */
    context?: PlayerMetricsContext;
    /**
     * 
     * @type {Provenance}
     * @memberof PlayerMetrics
     */
    provenance?: Provenance;
}

/**
 * Check if a given object implements the PlayerMetrics interface.
 */
export function instanceOfPlayerMetrics(value: object): value is PlayerMetrics {
    if (!('season' in value) || value['season'] === undefined) return false;
    if (!('week' in value) || value['week'] === undefined) return false;
    return true;
}

export function PlayerMetricsFromJSON(json: any): PlayerMetrics {
    return PlayerMetricsFromJSONTyped(json, false);
}

export function PlayerMetricsFromJSONTyped(json: any, ignoreDiscriminator: boolean): PlayerMetrics {
    if (json == null) {
        return json;
    }
    return {
        
        'season': json['season'],
        'week': json['week'],
        'usage': json['usage'] == null ? undefined : PlayerMetricsUsageFromJSON(json['usage']),
        'efficiency': json['efficiency'] == null ? undefined : PlayerMetricsEfficiencyFromJSON(json['efficiency']),
        'context': json['context'] == null ? undefined : PlayerMetricsContextFromJSON(json['context']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function PlayerMetricsToJSON(json: any): PlayerMetrics {
    return PlayerMetricsToJSONTyped(json, false);
}

export function PlayerMetricsToJSONTyped(value?: PlayerMetrics | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'season': value['season'],
        'week': value['week'],
        'usage': PlayerMetricsUsageToJSON(value['usage']),
        'efficiency': PlayerMetricsEfficiencyToJSON(value['efficiency']),
        'context': PlayerMetricsContextToJSON(value['context']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

