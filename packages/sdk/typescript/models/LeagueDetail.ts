/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TeamReference } from './TeamReference';
import {
    TeamReferenceFromJSON,
    TeamReferenceFromJSONTyped,
    TeamReferenceToJSON,
    TeamReferenceToJSONTyped,
} from './TeamReference';
import type { Provenance } from './Provenance';
import {
    ProvenanceFromJSON,
    ProvenanceFromJSONTyped,
    ProvenanceToJSON,
    ProvenanceToJSONTyped,
} from './Provenance';
import type { LeagueDetailScoring } from './LeagueDetailScoring';
import {
    LeagueDetailScoringFromJSON,
    LeagueDetailScoringFromJSONTyped,
    LeagueDetailScoringToJSON,
    LeagueDetailScoringToJSONTyped,
} from './LeagueDetailScoring';
import type { LeagueSummary } from './LeagueSummary';
import {
    LeagueSummaryFromJSON,
    LeagueSummaryFromJSONTyped,
    LeagueSummaryToJSON,
    LeagueSummaryToJSONTyped,
} from './LeagueSummary';
import type { TeamStanding } from './TeamStanding';
import {
    TeamStandingFromJSON,
    TeamStandingFromJSONTyped,
    TeamStandingToJSON,
    TeamStandingToJSONTyped,
} from './TeamStanding';
import type { LeagueDetailRosterSettings } from './LeagueDetailRosterSettings';
import {
    LeagueDetailRosterSettingsFromJSON,
    LeagueDetailRosterSettingsFromJSONTyped,
    LeagueDetailRosterSettingsToJSON,
    LeagueDetailRosterSettingsToJSONTyped,
} from './LeagueDetailRosterSettings';

/**
 * 
 * @export
 * @interface LeagueDetail
 */
export interface LeagueDetail {
    /**
     * 
     * @type {LeagueSummary}
     * @memberof LeagueDetail
     */
    league: LeagueSummary;
    /**
     * 
     * @type {Array<TeamReference>}
     * @memberof LeagueDetail
     */
    teams: Array<TeamReference>;
    /**
     * 
     * @type {Array<TeamStanding>}
     * @memberof LeagueDetail
     */
    standings?: Array<TeamStanding>;
    /**
     * 
     * @type {LeagueDetailScoring}
     * @memberof LeagueDetail
     */
    scoring: LeagueDetailScoring;
    /**
     * 
     * @type {LeagueDetailRosterSettings}
     * @memberof LeagueDetail
     */
    rosterSettings?: LeagueDetailRosterSettings;
    /**
     * 
     * @type {Provenance}
     * @memberof LeagueDetail
     */
    provenance?: Provenance;
}

/**
 * Check if a given object implements the LeagueDetail interface.
 */
export function instanceOfLeagueDetail(value: object): value is LeagueDetail {
    if (!('league' in value) || value['league'] === undefined) return false;
    if (!('teams' in value) || value['teams'] === undefined) return false;
    if (!('scoring' in value) || value['scoring'] === undefined) return false;
    return true;
}

export function LeagueDetailFromJSON(json: any): LeagueDetail {
    return LeagueDetailFromJSONTyped(json, false);
}

export function LeagueDetailFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeagueDetail {
    if (json == null) {
        return json;
    }
    return {
        
        'league': LeagueSummaryFromJSON(json['league']),
        'teams': ((json['teams'] as Array<any>).map(TeamReferenceFromJSON)),
        'standings': json['standings'] == null ? undefined : ((json['standings'] as Array<any>).map(TeamStandingFromJSON)),
        'scoring': LeagueDetailScoringFromJSON(json['scoring']),
        'rosterSettings': json['rosterSettings'] == null ? undefined : LeagueDetailRosterSettingsFromJSON(json['rosterSettings']),
        'provenance': json['provenance'] == null ? undefined : ProvenanceFromJSON(json['provenance']),
    };
}

export function LeagueDetailToJSON(json: any): LeagueDetail {
    return LeagueDetailToJSONTyped(json, false);
}

export function LeagueDetailToJSONTyped(value?: LeagueDetail | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'league': LeagueSummaryToJSON(value['league']),
        'teams': ((value['teams'] as Array<any>).map(TeamReferenceToJSON)),
        'standings': value['standings'] == null ? undefined : ((value['standings'] as Array<any>).map(TeamStandingToJSON)),
        'scoring': LeagueDetailScoringToJSON(value['scoring']),
        'rosterSettings': LeagueDetailRosterSettingsToJSON(value['rosterSettings']),
        'provenance': ProvenanceToJSON(value['provenance']),
    };
}

