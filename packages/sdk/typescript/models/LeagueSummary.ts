/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProviderId } from './ProviderId';
import {
    ProviderIdFromJSON,
    ProviderIdFromJSONTyped,
    ProviderIdToJSON,
} from './ProviderId';

/**
 * 
 * @export
 * @interface LeagueSummary
 */
export interface LeagueSummary {
    /**
     * Canonical UUID identifier.
     * @type {string}
     * @memberof LeagueSummary
     */
    leagueId: string;
    /**
     * 
     * @type {ProviderId}
     * @memberof LeagueSummary
     */
    provider: ProviderId;
    /**
     * 
     * @type {string}
     * @memberof LeagueSummary
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof LeagueSummary
     */
    season: number;
    /**
     * 
     * @type {string}
     * @memberof LeagueSummary
     */
    format?: string;
    /**
     * 
     * @type {string}
     * @memberof LeagueSummary
     */
    avatarUrl?: string;
    /**
     * 
     * @type {Date}
     * @memberof LeagueSummary
     */
    lastSyncAt?: Date;
    /**
     * 
     * @type {number}
     * @memberof LeagueSummary
     */
    teams?: number;
    /**
     * 
     * @type {string}
     * @memberof LeagueSummary
     */
    status?: LeagueSummaryStatusEnum;
}


/**
 * @export
 */
export const LeagueSummaryStatusEnum = {
    Preseason: 'preseason',
    InSeason: 'in-season',
    Completed: 'completed'
} as const;
export type LeagueSummaryStatusEnum = typeof LeagueSummaryStatusEnum[keyof typeof LeagueSummaryStatusEnum];


/**
 * Check if a given object implements the LeagueSummary interface.
 */
export function instanceOfLeagueSummary(value: object): value is LeagueSummary {
    if (!('leagueId' in value) || value['leagueId'] === undefined) return false;
    if (!('provider' in value) || value['provider'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('season' in value) || value['season'] === undefined) return false;
    return true;
}

export function LeagueSummaryFromJSON(json: any): LeagueSummary {
    return LeagueSummaryFromJSONTyped(json, false);
}

export function LeagueSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): LeagueSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'leagueId': json['leagueId'],
        'provider': ProviderIdFromJSON(json['provider']),
        'name': json['name'],
        'season': json['season'],
        'format': json['format'] == null ? undefined : json['format'],
        'avatarUrl': json['avatarUrl'] == null ? undefined : json['avatarUrl'],
        'lastSyncAt': json['lastSyncAt'] == null ? undefined : (new Date(json['lastSyncAt'])),
        'teams': json['teams'] == null ? undefined : json['teams'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function LeagueSummaryToJSON(value?: LeagueSummary | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'leagueId': value['leagueId'],
        'provider': ProviderIdToJSON(value['provider']),
        'name': value['name'],
        'season': value['season'],
        'format': value['format'],
        'avatarUrl': value['avatarUrl'],
        'lastSyncAt': value['lastSyncAt'] == null ? undefined : ((value['lastSyncAt']).toISOString()),
        'teams': value['teams'],
        'status': value['status'],
    };
}

