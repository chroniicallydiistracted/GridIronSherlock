/* tslint:disable */
/* eslint-disable */
/**
 * GridIron Sherlock API
 * Contracts for the GridIron Sherlock fantasy intelligence platform.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OptimizationAlternativeChangesInner } from './OptimizationAlternativeChangesInner';
import {
    OptimizationAlternativeChangesInnerFromJSON,
    OptimizationAlternativeChangesInnerFromJSONTyped,
    OptimizationAlternativeChangesInnerToJSON,
} from './OptimizationAlternativeChangesInner';
import type { OptimizationSlot } from './OptimizationSlot';
import {
    OptimizationSlotFromJSON,
    OptimizationSlotFromJSONTyped,
    OptimizationSlotToJSON,
} from './OptimizationSlot';

/**
 * 
 * @export
 * @interface OptimizationAlternative
 */
export interface OptimizationAlternative {
    [key: string]: any | any;
    /**
     * 
     * @type {number}
     * @memberof OptimizationAlternative
     */
    rank: number;
    /**
     * 
     * @type {number}
     * @memberof OptimizationAlternative
     */
    projectedPoints: number;
    /**
     * 
     * @type {number}
     * @memberof OptimizationAlternative
     */
    deltaFromBest?: number;
    /**
     * 
     * @type {Array<OptimizationSlot>}
     * @memberof OptimizationAlternative
     */
    lineup: Array<OptimizationSlot>;
    /**
     * 
     * @type {Array<OptimizationAlternativeChangesInner>}
     * @memberof OptimizationAlternative
     */
    changes?: Array<OptimizationAlternativeChangesInner>;
}

/**
 * Check if a given object implements the OptimizationAlternative interface.
 */
export function instanceOfOptimizationAlternative(value: object): value is OptimizationAlternative {
    if (!('rank' in value) || value['rank'] === undefined) return false;
    if (!('projectedPoints' in value) || value['projectedPoints'] === undefined) return false;
    if (!('lineup' in value) || value['lineup'] === undefined) return false;
    return true;
}

export function OptimizationAlternativeFromJSON(json: any): OptimizationAlternative {
    return OptimizationAlternativeFromJSONTyped(json, false);
}

export function OptimizationAlternativeFromJSONTyped(json: any, ignoreDiscriminator: boolean): OptimizationAlternative {
    if (json == null) {
        return json;
    }
    return {
        
            ...json,
        'rank': json['rank'],
        'projectedPoints': json['projectedPoints'],
        'deltaFromBest': json['deltaFromBest'] == null ? undefined : json['deltaFromBest'],
        'lineup': ((json['lineup'] as Array<any>).map(OptimizationSlotFromJSON)),
        'changes': json['changes'] == null ? undefined : ((json['changes'] as Array<any>).map(OptimizationAlternativeChangesInnerFromJSON)),
    };
}

export function OptimizationAlternativeToJSON(value?: OptimizationAlternative | null): any {
    if (value == null) {
        return value;
    }
    return {
        
            ...value,
        'rank': value['rank'],
        'projectedPoints': value['projectedPoints'],
        'deltaFromBest': value['deltaFromBest'],
        'lineup': ((value['lineup'] as Array<any>).map(OptimizationSlotToJSON)),
        'changes': value['changes'] == null ? undefined : ((value['changes'] as Array<any>).map(OptimizationAlternativeChangesInnerToJSON)),
    };
}

