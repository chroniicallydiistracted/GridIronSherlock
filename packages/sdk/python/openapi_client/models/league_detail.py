# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.league_detail_roster_settings import LeagueDetailRosterSettings
from openapi_client.models.league_detail_scoring import LeagueDetailScoring
from openapi_client.models.league_summary import LeagueSummary
from openapi_client.models.provenance import Provenance
from openapi_client.models.team_reference import TeamReference
from openapi_client.models.team_standing import TeamStanding
from typing import Optional, Set
from typing_extensions import Self

class LeagueDetail(BaseModel):
    """
    LeagueDetail
    """ # noqa: E501
    league: LeagueSummary
    teams: List[TeamReference]
    standings: Optional[List[TeamStanding]] = None
    scoring: LeagueDetailScoring
    roster_settings: Optional[LeagueDetailRosterSettings] = Field(default=None, alias="rosterSettings")
    provenance: Optional[Provenance] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["league", "teams", "standings", "scoring", "rosterSettings", "provenance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LeagueDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of league
        if self.league:
            _dict['league'] = self.league.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in teams (list)
        _items = []
        if self.teams:
            for _item_teams in self.teams:
                if _item_teams:
                    _items.append(_item_teams.to_dict())
            _dict['teams'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in standings (list)
        _items = []
        if self.standings:
            for _item_standings in self.standings:
                if _item_standings:
                    _items.append(_item_standings.to_dict())
            _dict['standings'] = _items
        # override the default output from pydantic by calling `to_dict()` of scoring
        if self.scoring:
            _dict['scoring'] = self.scoring.to_dict()
        # override the default output from pydantic by calling `to_dict()` of roster_settings
        if self.roster_settings:
            _dict['rosterSettings'] = self.roster_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LeagueDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "league": LeagueSummary.from_dict(obj["league"]) if obj.get("league") is not None else None,
            "teams": [TeamReference.from_dict(_item) for _item in obj["teams"]] if obj.get("teams") is not None else None,
            "standings": [TeamStanding.from_dict(_item) for _item in obj["standings"]] if obj.get("standings") is not None else None,
            "scoring": LeagueDetailScoring.from_dict(obj["scoring"]) if obj.get("scoring") is not None else None,
            "rosterSettings": LeagueDetailRosterSettings.from_dict(obj["rosterSettings"]) if obj.get("rosterSettings") is not None else None,
            "provenance": Provenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


