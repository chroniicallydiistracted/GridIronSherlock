# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.optimization_alternative_changes_inner import OptimizationAlternativeChangesInner
from openapi_client.models.optimization_slot import OptimizationSlot
from typing import Optional, Set
from typing_extensions import Self

class OptimizationAlternative(BaseModel):
    """
    OptimizationAlternative
    """ # noqa: E501
    rank: Annotated[int, Field(strict=True, ge=1)]
    projected_points: Union[StrictFloat, StrictInt] = Field(alias="projectedPoints")
    delta_from_best: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="deltaFromBest")
    lineup: List[OptimizationSlot]
    changes: Optional[List[OptimizationAlternativeChangesInner]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["rank", "projectedPoints", "deltaFromBest", "lineup", "changes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptimizationAlternative from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in lineup (list)
        _items = []
        if self.lineup:
            for _item_lineup in self.lineup:
                if _item_lineup:
                    _items.append(_item_lineup.to_dict())
            _dict['lineup'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in changes (list)
        _items = []
        if self.changes:
            for _item_changes in self.changes:
                if _item_changes:
                    _items.append(_item_changes.to_dict())
            _dict['changes'] = _items
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptimizationAlternative from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rank": obj.get("rank"),
            "projectedPoints": obj.get("projectedPoints"),
            "deltaFromBest": obj.get("deltaFromBest"),
            "lineup": [OptimizationSlot.from_dict(_item) for _item in obj["lineup"]] if obj.get("lineup") is not None else None,
            "changes": [OptimizationAlternativeChangesInner.from_dict(_item) for _item in obj["changes"]] if obj.get("changes") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


