# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from openapi_client.models.provenance import Provenance
from typing import Optional, Set
from typing_extensions import Self

class ProjectionSummary(BaseModel):
    """
    ProjectionSummary
    """ # noqa: E501
    mean_points: Union[StrictFloat, StrictInt] = Field(alias="meanPoints")
    p20: Union[StrictFloat, StrictInt]
    p50: Union[StrictFloat, StrictInt]
    p80: Union[StrictFloat, StrictInt]
    boom_probability: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(alias="boomProbability")
    bust_probability: Union[Annotated[float, Field(le=1, strict=True, ge=0)], Annotated[int, Field(le=1, strict=True, ge=0)]] = Field(alias="bustProbability")
    floor_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="floorPoints")
    ceiling_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="ceilingPoints")
    provenance: Optional[Provenance] = None
    __properties: ClassVar[List[str]] = ["meanPoints", "p20", "p50", "p80", "boomProbability", "bustProbability", "floorPoints", "ceilingPoints", "provenance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectionSummary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectionSummary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "meanPoints": obj.get("meanPoints"),
            "p20": obj.get("p20"),
            "p50": obj.get("p50"),
            "p80": obj.get("p80"),
            "boomProbability": obj.get("boomProbability"),
            "bustProbability": obj.get("bustProbability"),
            "floorPoints": obj.get("floorPoints"),
            "ceilingPoints": obj.get("ceilingPoints"),
            "provenance": Provenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None
        })
        return _obj


