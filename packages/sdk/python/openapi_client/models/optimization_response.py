# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from openapi_client.models.optimization_alternative import OptimizationAlternative
from openapi_client.models.optimization_objective import OptimizationObjective
from openapi_client.models.optimization_slot import OptimizationSlot
from openapi_client.models.provenance import Provenance
from typing import Optional, Set
from typing_extensions import Self

class OptimizationResponse(BaseModel):
    """
    OptimizationResponse
    """ # noqa: E501
    run_id: UUID = Field(description="Canonical UUID identifier.", alias="runId")
    submitted_at: datetime = Field(alias="submittedAt")
    objective: OptimizationObjective
    result_lineup: List[OptimizationSlot] = Field(alias="resultLineup")
    bench: List[OptimizationSlot]
    alternatives: Optional[List[OptimizationAlternative]] = None
    insights: Optional[List[StrictStr]] = None
    provenance: Optional[Provenance] = None
    __properties: ClassVar[List[str]] = ["runId", "submittedAt", "objective", "resultLineup", "bench", "alternatives", "insights", "provenance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OptimizationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of objective
        if self.objective:
            _dict['objective'] = self.objective.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in result_lineup (list)
        _items = []
        if self.result_lineup:
            for _item_result_lineup in self.result_lineup:
                if _item_result_lineup:
                    _items.append(_item_result_lineup.to_dict())
            _dict['resultLineup'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bench (list)
        _items = []
        if self.bench:
            for _item_bench in self.bench:
                if _item_bench:
                    _items.append(_item_bench.to_dict())
            _dict['bench'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in alternatives (list)
        _items = []
        if self.alternatives:
            for _item_alternatives in self.alternatives:
                if _item_alternatives:
                    _items.append(_item_alternatives.to_dict())
            _dict['alternatives'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OptimizationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "runId": obj.get("runId"),
            "submittedAt": obj.get("submittedAt"),
            "objective": OptimizationObjective.from_dict(obj["objective"]) if obj.get("objective") is not None else None,
            "resultLineup": [OptimizationSlot.from_dict(_item) for _item in obj["resultLineup"]] if obj.get("resultLineup") is not None else None,
            "bench": [OptimizationSlot.from_dict(_item) for _item in obj["bench"]] if obj.get("bench") is not None else None,
            "alternatives": [OptimizationAlternative.from_dict(_item) for _item in obj["alternatives"]] if obj.get("alternatives") is not None else None,
            "insights": obj.get("insights"),
            "provenance": Provenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None
        })
        return _obj


