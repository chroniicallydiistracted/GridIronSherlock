# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from uuid import UUID
from openapi_client.models.scoring_period import ScoringPeriod
from openapi_client.models.trade_asset import TradeAsset
from typing import Optional, Set
from typing_extensions import Self

class TradeEstimateRequest(BaseModel):
    """
    TradeEstimateRequest
    """ # noqa: E501
    league_id: UUID = Field(description="Canonical UUID identifier.", alias="leagueId")
    period: Optional[ScoringPeriod] = None
    from_team_id: UUID = Field(description="Canonical UUID identifier.", alias="fromTeamId")
    to_team_id: UUID = Field(description="Canonical UUID identifier.", alias="toTeamId")
    offer: List[TradeAsset]
    request: List[TradeAsset]
    allow_counter: Optional[StrictBool] = Field(default=True, alias="allowCounter")
    include_waiver_alternatives: Optional[StrictBool] = Field(default=False, alias="includeWaiverAlternatives")
    __properties: ClassVar[List[str]] = ["leagueId", "period", "fromTeamId", "toTeamId", "offer", "request", "allowCounter", "includeWaiverAlternatives"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TradeEstimateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in offer (list)
        _items = []
        if self.offer:
            for _item_offer in self.offer:
                if _item_offer:
                    _items.append(_item_offer.to_dict())
            _dict['offer'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in request (list)
        _items = []
        if self.request:
            for _item_request in self.request:
                if _item_request:
                    _items.append(_item_request.to_dict())
            _dict['request'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TradeEstimateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "leagueId": obj.get("leagueId"),
            "period": ScoringPeriod.from_dict(obj["period"]) if obj.get("period") is not None else None,
            "fromTeamId": obj.get("fromTeamId"),
            "toTeamId": obj.get("toTeamId"),
            "offer": [TradeAsset.from_dict(_item) for _item in obj["offer"]] if obj.get("offer") is not None else None,
            "request": [TradeAsset.from_dict(_item) for _item in obj["request"]] if obj.get("request") is not None else None,
            "allowCounter": obj.get("allowCounter") if obj.get("allowCounter") is not None else True,
            "includeWaiverAlternatives": obj.get("includeWaiverAlternatives") if obj.get("includeWaiverAlternatives") is not None else False
        })
        return _obj


