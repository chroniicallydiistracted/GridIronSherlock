# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.optimization_response import OptimizationResponse

class TestOptimizationResponse(unittest.TestCase):
    """OptimizationResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OptimizationResponse:
        """Test OptimizationResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OptimizationResponse`
        """
        model = OptimizationResponse()
        if include_optional:
            return OptimizationResponse(
                run_id = '',
                submitted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                objective = openapi_client.models.optimization_objective.OptimizationObjective(
                    focus = 'balanced', 
                    ceiling_weight = 0, 
                    variance_penalty = 0, 
                    notes = '', ),
                result_lineup = [
                    openapi_client.models.optimization_slot.OptimizationSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        delta = 1.337, 
                        reason = '', )
                    ],
                bench = [
                    openapi_client.models.optimization_slot.OptimizationSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        delta = 1.337, 
                        reason = '', )
                    ],
                alternatives = [
                    openapi_client.models.optimization_alternative.OptimizationAlternative(
                        rank = 1, 
                        projected_points = 1.337, 
                        delta_from_best = 1.337, 
                        lineup = [
                            openapi_client.models.optimization_slot.OptimizationSlot(
                                slot = '', 
                                player = openapi_client.models.player_summary.PlayerSummary(
                                    player_id = '', 
                                    gsis_id = '', 
                                    full_name = '', 
                                    position = '', 
                                    team = '', 
                                    bye_week = 1, 
                                    age = 18, 
                                    injury = openapi_client.models.injury_status.InjuryStatus(
                                        status = 'active', 
                                        designation = '', 
                                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        notes = '', ), 
                                    provenance = openapi_client.models.provenance.Provenance(
                                        source = '', 
                                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                        model_version = '', 
                                        notes = [
                                            ''
                                            ], ), ), 
                                projection = openapi_client.models.projection_summary.ProjectionSummary(
                                    mean_points = 1.337, 
                                    p20 = 1.337, 
                                    p50 = 1.337, 
                                    p80 = 1.337, 
                                    boom_probability = 0, 
                                    bust_probability = 0, 
                                    floor_points = 1.337, 
                                    ceiling_points = 1.337, ), 
                                delta = 1.337, 
                                reason = '', )
                            ], 
                        changes = [
                            openapi_client.models.optimization_alternative_changes_inner.OptimizationAlternative_changes_inner(
                                slot = '', 
                                in_player_id = '', 
                                out_player_id = '', )
                            ], )
                    ],
                insights = [
                    ''
                    ],
                provenance = openapi_client.models.provenance.Provenance(
                    source = '', 
                    as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    model_version = '', 
                    notes = [
                        ''
                        ], )
            )
        else:
            return OptimizationResponse(
                run_id = '',
                submitted_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                objective = openapi_client.models.optimization_objective.OptimizationObjective(
                    focus = 'balanced', 
                    ceiling_weight = 0, 
                    variance_penalty = 0, 
                    notes = '', ),
                result_lineup = [
                    openapi_client.models.optimization_slot.OptimizationSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        delta = 1.337, 
                        reason = '', )
                    ],
                bench = [
                    openapi_client.models.optimization_slot.OptimizationSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        delta = 1.337, 
                        reason = '', )
                    ],
        )
        """

    def testOptimizationResponse(self):
        """Test OptimizationResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
