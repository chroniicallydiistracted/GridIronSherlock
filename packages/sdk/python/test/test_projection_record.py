# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gridiron_sherlock_sdk.models.projection_record import ProjectionRecord

class TestProjectionRecord(unittest.TestCase):
    """ProjectionRecord unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProjectionRecord:
        """Test ProjectionRecord
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProjectionRecord`
        """
        model = ProjectionRecord()
        if include_optional:
            return ProjectionRecord(
                player = gridiron_sherlock_sdk.models.player_summary.PlayerSummary(
                    player_id = '', 
                    gsis_id = '', 
                    full_name = '', 
                    position = '', 
                    team = '', 
                    bye_week = 1, 
                    age = 18, 
                    injury = gridiron_sherlock_sdk.models.injury_status.InjuryStatus(
                        status = 'active', 
                        designation = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        notes = '', ), 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
                period = gridiron_sherlock_sdk.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                league_id = '',
                projection = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                    mean_points = 1.337, 
                    p20 = 1.337, 
                    p50 = 1.337, 
                    p80 = 1.337, 
                    boom_probability = 0, 
                    bust_probability = 0, 
                    floor_points = 1.337, 
                    ceiling_points = 1.337, 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
                opponent = gridiron_sherlock_sdk.models.projection_record_opponent.ProjectionRecord_opponent(
                    team = '', 
                    home = True, 
                    implied_total = 1.337, 
                    pace_rank = 56, ),
                usage = gridiron_sherlock_sdk.models.projection_record_usage.ProjectionRecord_usage(
                    snap_share = 1.337, 
                    route_share = 1.337, 
                    target_share = 1.337, 
                    rush_share = 1.337, )
            )
        else:
            return ProjectionRecord(
                player = gridiron_sherlock_sdk.models.player_summary.PlayerSummary(
                    player_id = '', 
                    gsis_id = '', 
                    full_name = '', 
                    position = '', 
                    team = '', 
                    bye_week = 1, 
                    age = 18, 
                    injury = gridiron_sherlock_sdk.models.injury_status.InjuryStatus(
                        status = 'active', 
                        designation = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        notes = '', ), 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
                period = gridiron_sherlock_sdk.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                projection = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                    mean_points = 1.337, 
                    p20 = 1.337, 
                    p50 = 1.337, 
                    p80 = 1.337, 
                    boom_probability = 0, 
                    bust_probability = 0, 
                    floor_points = 1.337, 
                    ceiling_points = 1.337, 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
        )
        """

    def testProjectionRecord(self):
        """Test ProjectionRecord"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
