# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.projection_list_response import ProjectionListResponse

class TestProjectionListResponse(unittest.TestCase):
    """ProjectionListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ProjectionListResponse:
        """Test ProjectionListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ProjectionListResponse`
        """
        model = ProjectionListResponse()
        if include_optional:
            return ProjectionListResponse(
                total = 0,
                page = 1,
                page_size = 1,
                items = [
                    openapi_client.models.projection_record.ProjectionRecord(
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        period = openapi_client.models.scoring_period.ScoringPeriod(
                            season = 2000, 
                            week = 1, ), 
                        league_id = '', 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        opponent = openapi_client.models.projection_record_opponent.ProjectionRecord_opponent(
                            team = '', 
                            home = True, 
                            implied_total = 1.337, 
                            pace_rank = 56, ), 
                        usage = openapi_client.models.projection_record_usage.ProjectionRecord_usage(
                            snap_share = 1.337, 
                            route_share = 1.337, 
                            target_share = 1.337, 
                            rush_share = 1.337, ), )
                    ]
            )
        else:
            return ProjectionListResponse(
                total = 0,
                page = 1,
                page_size = 1,
                items = [
                    openapi_client.models.projection_record.ProjectionRecord(
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        period = openapi_client.models.scoring_period.ScoringPeriod(
                            season = 2000, 
                            week = 1, ), 
                        league_id = '', 
                        projection = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        opponent = openapi_client.models.projection_record_opponent.ProjectionRecord_opponent(
                            team = '', 
                            home = True, 
                            implied_total = 1.337, 
                            pace_rank = 56, ), 
                        usage = openapi_client.models.projection_record_usage.ProjectionRecord_usage(
                            snap_share = 1.337, 
                            route_share = 1.337, 
                            target_share = 1.337, 
                            rush_share = 1.337, ), )
                    ],
        )
        """

    def testProjectionListResponse(self):
        """Test ProjectionListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
