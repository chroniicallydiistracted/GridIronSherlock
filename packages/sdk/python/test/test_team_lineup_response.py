# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.team_lineup_response import TeamLineupResponse

class TestTeamLineupResponse(unittest.TestCase):
    """TeamLineupResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> TeamLineupResponse:
        """Test TeamLineupResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `TeamLineupResponse`
        """
        model = TeamLineupResponse()
        if include_optional:
            return TeamLineupResponse(
                team = openapi_client.models.team_reference.TeamReference(
                    team_id = '', 
                    league_id = '', 
                    name = '', 
                    abbreviation = '', 
                    manager = '', 
                    record = openapi_client.models.team_reference_record.TeamReference_record(
                        wins = 0, 
                        losses = 0, 
                        ties = 0, ), ),
                period = openapi_client.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                lineup = [
                    openapi_client.models.lineup_slot.LineupSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        status = 'starting', 
                        actual_points = 1.337, 
                        notes = '', )
                    ],
                bench = [
                    openapi_client.models.lineup_slot.LineupSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        status = 'starting', 
                        actual_points = 1.337, 
                        notes = '', )
                    ],
                total_projected = 1.337,
                total_actual = 1.337,
                provenance = openapi_client.models.provenance.Provenance(
                    source = '', 
                    as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    model_version = '', 
                    notes = [
                        ''
                        ], )
            )
        else:
            return TeamLineupResponse(
                team = openapi_client.models.team_reference.TeamReference(
                    team_id = '', 
                    league_id = '', 
                    name = '', 
                    abbreviation = '', 
                    manager = '', 
                    record = openapi_client.models.team_reference_record.TeamReference_record(
                        wins = 0, 
                        losses = 0, 
                        ties = 0, ), ),
                period = openapi_client.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                lineup = [
                    openapi_client.models.lineup_slot.LineupSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        status = 'starting', 
                        actual_points = 1.337, 
                        notes = '', )
                    ],
                bench = [
                    openapi_client.models.lineup_slot.LineupSlot(
                        slot = '', 
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected = openapi_client.models.projection_summary.ProjectionSummary(
                            mean_points = 1.337, 
                            p20 = 1.337, 
                            p50 = 1.337, 
                            p80 = 1.337, 
                            boom_probability = 0, 
                            bust_probability = 0, 
                            floor_points = 1.337, 
                            ceiling_points = 1.337, ), 
                        status = 'starting', 
                        actual_points = 1.337, 
                        notes = '', )
                    ],
        )
        """

    def testTeamLineupResponse(self):
        """Test TeamLineupResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
