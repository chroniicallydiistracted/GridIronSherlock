# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from gridiron_sherlock_sdk.models.player_detail import PlayerDetail

class TestPlayerDetail(unittest.TestCase):
    """PlayerDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PlayerDetail:
        """Test PlayerDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PlayerDetail`
        """
        model = PlayerDetail()
        if include_optional:
            return PlayerDetail(
                player = gridiron_sherlock_sdk.models.player_summary.PlayerSummary(
                    player_id = '', 
                    gsis_id = '', 
                    full_name = '', 
                    position = '', 
                    team = '', 
                    bye_week = 1, 
                    age = 18, 
                    injury = gridiron_sherlock_sdk.models.injury_status.InjuryStatus(
                        status = 'active', 
                        designation = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        notes = '', ), 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
                metrics = {
                    'key' : null
                    },
                projections = gridiron_sherlock_sdk.models.player_detail_projections.PlayerDetail_projections(
                    weekly = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                        mean_points = 1.337, 
                        p20 = 1.337, 
                        p50 = 1.337, 
                        p80 = 1.337, 
                        boom_probability = 0, 
                        bust_probability = 0, 
                        floor_points = 1.337, 
                        ceiling_points = 1.337, 
                        provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                            source = '', 
                            as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            model_version = '', 
                            notes = [
                                ''
                                ], ), ), 
                    ros = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                        mean_points = 1.337, 
                        p20 = 1.337, 
                        p50 = 1.337, 
                        p80 = 1.337, 
                        boom_probability = 0, 
                        bust_probability = 0, 
                        floor_points = 1.337, 
                        ceiling_points = 1.337, ), ),
                recent_games = [
                    gridiron_sherlock_sdk.models.recent_game.RecentGame(
                        season = 56, 
                        week = 56, 
                        opponent = '', 
                        fantasy_points = 1.337, 
                        snap_share = 1.337, 
                        notes = '', )
                    ],
                insights = [
                    ''
                    ]
            )
        else:
            return PlayerDetail(
                player = gridiron_sherlock_sdk.models.player_summary.PlayerSummary(
                    player_id = '', 
                    gsis_id = '', 
                    full_name = '', 
                    position = '', 
                    team = '', 
                    bye_week = 1, 
                    age = 18, 
                    injury = gridiron_sherlock_sdk.models.injury_status.InjuryStatus(
                        status = 'active', 
                        designation = '', 
                        updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        notes = '', ), 
                    provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                        source = '', 
                        as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        model_version = '', 
                        notes = [
                            ''
                            ], ), ),
                metrics = {
                    'key' : null
                    },
                projections = gridiron_sherlock_sdk.models.player_detail_projections.PlayerDetail_projections(
                    weekly = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                        mean_points = 1.337, 
                        p20 = 1.337, 
                        p50 = 1.337, 
                        p80 = 1.337, 
                        boom_probability = 0, 
                        bust_probability = 0, 
                        floor_points = 1.337, 
                        ceiling_points = 1.337, 
                        provenance = gridiron_sherlock_sdk.models.provenance.Provenance(
                            source = '', 
                            as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            model_version = '', 
                            notes = [
                                ''
                                ], ), ), 
                    ros = gridiron_sherlock_sdk.models.projection_summary.ProjectionSummary(
                        mean_points = 1.337, 
                        p20 = 1.337, 
                        p50 = 1.337, 
                        p80 = 1.337, 
                        boom_probability = 0, 
                        bust_probability = 0, 
                        floor_points = 1.337, 
                        ceiling_points = 1.337, ), ),
        )
        """

    def testPlayerDetail(self):
        """Test PlayerDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
