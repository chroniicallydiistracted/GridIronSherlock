# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.o_auth_callback_response import OAuthCallbackResponse

class TestOAuthCallbackResponse(unittest.TestCase):
    """OAuthCallbackResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OAuthCallbackResponse:
        """Test OAuthCallbackResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OAuthCallbackResponse`
        """
        model = OAuthCallbackResponse()
        if include_optional:
            return OAuthCallbackResponse(
                provider = 'espn',
                status = 'linked',
                linked_account = openapi_client.models.linked_account.LinkedAccount(
                    provider = 'espn', 
                    status = 'linked', 
                    scopes = [
                        ''
                        ], 
                    linked_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    last_sync_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    needs_reauth = True, 
                    error_code = '', 
                    error_message = '', ),
                redirect = '',
                message = ''
            )
        else:
            return OAuthCallbackResponse(
                provider = 'espn',
                status = 'linked',
        )
        """

    def testOAuthCallbackResponse(self):
        """Test OAuthCallbackResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
