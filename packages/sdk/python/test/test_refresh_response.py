# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.refresh_response import RefreshResponse

class TestRefreshResponse(unittest.TestCase):
    """RefreshResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RefreshResponse:
        """Test RefreshResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RefreshResponse`
        """
        model = RefreshResponse()
        if include_optional:
            return RefreshResponse(
                scope = 'leagues',
                status = 'queued',
                enqueued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                estimated_completion = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
                context = None,
                provenance = openapi_client.models.provenance.Provenance(
                    source = '', 
                    as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    model_version = '', 
                    notes = [
                        ''
                        ], )
            )
        else:
            return RefreshResponse(
                scope = 'leagues',
                status = 'queued',
                enqueued_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'),
        )
        """

    def testRefreshResponse(self):
        """Test RefreshResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
