# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.optimization_request import OptimizationRequest

class TestOptimizationRequest(unittest.TestCase):
    """OptimizationRequest unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> OptimizationRequest:
        """Test OptimizationRequest
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `OptimizationRequest`
        """
        model = OptimizationRequest()
        if include_optional:
            return OptimizationRequest(
                period = openapi_client.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                objective = openapi_client.models.optimization_objective.OptimizationObjective(
                    focus = 'balanced', 
                    ceiling_weight = 0, 
                    variance_penalty = 0, 
                    notes = '', ),
                constraints = openapi_client.models.optimization_constraints.OptimizationConstraints(
                    locked_players = [
                        openapi_client.models.optimization_constraints_locked_players_inner.OptimizationConstraints_lockedPlayers_inner(
                            slot = '', 
                            player_id = '', )
                        ], 
                    excluded_player_ids = [
                        ''
                        ], 
                    max_players_per_team = 1, 
                    risk_tolerance = 'medium', 
                    bench_depth = 0, ),
                context = openapi_client.models.optimization_request_context.OptimizationRequest_context(
                    include_waivers = True, 
                    include_trades = True, 
                    notes = '', )
            )
        else:
            return OptimizationRequest(
                period = openapi_client.models.scoring_period.ScoringPeriod(
                    season = 2000, 
                    week = 1, ),
                objective = openapi_client.models.optimization_objective.OptimizationObjective(
                    focus = 'balanced', 
                    ceiling_weight = 0, 
                    variance_penalty = 0, 
                    notes = '', ),
        )
        """

    def testOptimizationRequest(self):
        """Test OptimizationRequest"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
