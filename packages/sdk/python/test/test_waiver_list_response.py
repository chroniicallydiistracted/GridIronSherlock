# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.waiver_list_response import WaiverListResponse

class TestWaiverListResponse(unittest.TestCase):
    """WaiverListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> WaiverListResponse:
        """Test WaiverListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `WaiverListResponse`
        """
        model = WaiverListResponse()
        if include_optional:
            return WaiverListResponse(
                total = 0,
                page = 1,
                page_size = 1,
                items = [
                    openapi_client.models.waiver_recommendation.WaiverRecommendation(
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected_points = 1.337, 
                        faab = openapi_client.models.faab_range.FAABRange(
                            low = 1.337, 
                            medium = 1.337, 
                            high = 1.337, ), 
                        priority = 1, 
                        recommended_action = 'add', 
                        reason = '', 
                        replacement_comparison = openapi_client.models.waiver_recommendation_replacement_comparison.WaiverRecommendation_replacementComparison(
                            drop_player_id = '', 
                            delta_points = 1.337, ), 
                        provenance = openapi_client.models.provenance.Provenance(
                            source = '', 
                            as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            model_version = '', ), )
                    ]
            )
        else:
            return WaiverListResponse(
                total = 0,
                page = 1,
                page_size = 1,
                items = [
                    openapi_client.models.waiver_recommendation.WaiverRecommendation(
                        player = openapi_client.models.player_summary.PlayerSummary(
                            player_id = '', 
                            gsis_id = '', 
                            full_name = '', 
                            position = '', 
                            team = '', 
                            bye_week = 1, 
                            age = 18, 
                            injury = openapi_client.models.injury_status.InjuryStatus(
                                status = 'active', 
                                designation = '', 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                notes = '', ), 
                            provenance = openapi_client.models.provenance.Provenance(
                                source = '', 
                                as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                model_version = '', 
                                notes = [
                                    ''
                                    ], ), ), 
                        projected_points = 1.337, 
                        faab = openapi_client.models.faab_range.FAABRange(
                            low = 1.337, 
                            medium = 1.337, 
                            high = 1.337, ), 
                        priority = 1, 
                        recommended_action = 'add', 
                        reason = '', 
                        replacement_comparison = openapi_client.models.waiver_recommendation_replacement_comparison.WaiverRecommendation_replacementComparison(
                            drop_player_id = '', 
                            delta_points = 1.337, ), 
                        provenance = openapi_client.models.provenance.Provenance(
                            source = '', 
                            as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                            model_version = '', ), )
                    ],
        )
        """

    def testWaiverListResponse(self):
        """Test WaiverListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
