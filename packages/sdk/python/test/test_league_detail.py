# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openapi_client.models.league_detail import LeagueDetail

class TestLeagueDetail(unittest.TestCase):
    """LeagueDetail unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> LeagueDetail:
        """Test LeagueDetail
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `LeagueDetail`
        """
        model = LeagueDetail()
        if include_optional:
            return LeagueDetail(
                league = openapi_client.models.league_summary.LeagueSummary(
                    league_id = '', 
                    provider = 'espn', 
                    name = '', 
                    season = 56, 
                    format = '', 
                    avatar_url = '', 
                    last_sync_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    teams = 56, 
                    status = 'preseason', ),
                teams = [
                    openapi_client.models.team_reference.TeamReference(
                        team_id = '', 
                        league_id = '', 
                        name = '', 
                        abbreviation = '', 
                        manager = '', 
                        record = openapi_client.models.team_reference_record.TeamReference_record(
                            wins = 0, 
                            losses = 0, 
                            ties = 0, ), )
                    ],
                standings = [
                    openapi_client.models.team_standing.TeamStanding(
                        team = openapi_client.models.team_reference.TeamReference(
                            team_id = '', 
                            league_id = '', 
                            name = '', 
                            abbreviation = '', 
                            manager = '', 
                            record = openapi_client.models.team_reference_record.TeamReference_record(
                                wins = 0, 
                                losses = 0, 
                                ties = 0, ), ), 
                        rank = 1, 
                        points_for = 1.337, 
                        points_against = 1.337, 
                        streak = '', 
                        notes = '', )
                    ],
                scoring = openapi_client.models.league_detail_scoring.LeagueDetail_scoring(
                    type = '', 
                    ppr = 1.337, 
                    bonus_rules = [
                        ''
                        ], ),
                roster_settings = openapi_client.models.league_detail_roster_settings.LeagueDetail_rosterSettings(
                    slots = [
                        openapi_client.models.roster_slot_rule.RosterSlotRule(
                            slot = '', 
                            count = 0, )
                        ], 
                    bench_slots = 0, 
                    ir_slots = 0, 
                    notes = '', ),
                provenance = openapi_client.models.provenance.Provenance(
                    source = '', 
                    as_of = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    model_version = '', 
                    notes = [
                        ''
                        ], )
            )
        else:
            return LeagueDetail(
                league = openapi_client.models.league_summary.LeagueSummary(
                    league_id = '', 
                    provider = 'espn', 
                    name = '', 
                    season = 56, 
                    format = '', 
                    avatar_url = '', 
                    last_sync_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                    teams = 56, 
                    status = 'preseason', ),
                teams = [
                    openapi_client.models.team_reference.TeamReference(
                        team_id = '', 
                        league_id = '', 
                        name = '', 
                        abbreviation = '', 
                        manager = '', 
                        record = openapi_client.models.team_reference_record.TeamReference_record(
                            wins = 0, 
                            losses = 0, 
                            ties = 0, ), )
                    ],
                scoring = openapi_client.models.league_detail_scoring.LeagueDetail_scoring(
                    type = '', 
                    ppr = 1.337, 
                    bonus_rules = [
                        ''
                        ], ),
        )
        """

    def testLeagueDetail(self):
        """Test LeagueDetail"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
