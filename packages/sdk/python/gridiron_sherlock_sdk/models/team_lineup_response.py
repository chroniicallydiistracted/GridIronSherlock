# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from gridiron_sherlock_sdk.models.lineup_slot import LineupSlot
from gridiron_sherlock_sdk.models.provenance import Provenance
from gridiron_sherlock_sdk.models.scoring_period import ScoringPeriod
from gridiron_sherlock_sdk.models.team_reference import TeamReference
from typing import Optional, Set
from typing_extensions import Self

class TeamLineupResponse(BaseModel):
    """
    TeamLineupResponse
    """ # noqa: E501
    team: TeamReference
    period: ScoringPeriod
    lineup: List[LineupSlot]
    bench: List[LineupSlot]
    total_projected: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalProjected")
    total_actual: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalActual")
    provenance: Optional[Provenance] = None
    __properties: ClassVar[List[str]] = ["team", "period", "lineup", "bench", "totalProjected", "totalActual", "provenance"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TeamLineupResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team
        if self.team:
            _dict['team'] = self.team.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in lineup (list)
        _items = []
        if self.lineup:
            for _item in self.lineup:
                if _item:
                    _items.append(_item.to_dict())
            _dict['lineup'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bench (list)
        _items = []
        if self.bench:
            for _item in self.bench:
                if _item:
                    _items.append(_item.to_dict())
            _dict['bench'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TeamLineupResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "team": TeamReference.from_dict(obj["team"]) if obj.get("team") is not None else None,
            "period": ScoringPeriod.from_dict(obj["period"]) if obj.get("period") is not None else None,
            "lineup": [LineupSlot.from_dict(_item) for _item in obj["lineup"]] if obj.get("lineup") is not None else None,
            "bench": [LineupSlot.from_dict(_item) for _item in obj["bench"]] if obj.get("bench") is not None else None,
            "totalProjected": obj.get("totalProjected"),
            "totalActual": obj.get("totalActual"),
            "provenance": Provenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None
        })
        return _obj


