# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gridiron_sherlock_sdk.models.player_summary import PlayerSummary
from gridiron_sherlock_sdk.models.projection_record_opponent import ProjectionRecordOpponent
from gridiron_sherlock_sdk.models.projection_record_usage import ProjectionRecordUsage
from gridiron_sherlock_sdk.models.projection_summary import ProjectionSummary
from gridiron_sherlock_sdk.models.scoring_period import ScoringPeriod
from typing import Optional, Set
from typing_extensions import Self

class ProjectionRecord(BaseModel):
    """
    ProjectionRecord
    """ # noqa: E501
    player: PlayerSummary
    period: ScoringPeriod
    league_id: Optional[StrictStr] = Field(default=None, description="Canonical UUID identifier.", alias="leagueId")
    projection: ProjectionSummary
    opponent: Optional[ProjectionRecordOpponent] = None
    usage: Optional[ProjectionRecordUsage] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["player", "period", "leagueId", "projection", "opponent", "usage"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProjectionRecord from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of period
        if self.period:
            _dict['period'] = self.period.to_dict()
        # override the default output from pydantic by calling `to_dict()` of projection
        if self.projection:
            _dict['projection'] = self.projection.to_dict()
        # override the default output from pydantic by calling `to_dict()` of opponent
        if self.opponent:
            _dict['opponent'] = self.opponent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of usage
        if self.usage:
            _dict['usage'] = self.usage.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProjectionRecord from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "player": PlayerSummary.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "period": ScoringPeriod.from_dict(obj["period"]) if obj.get("period") is not None else None,
            "leagueId": obj.get("leagueId"),
            "projection": ProjectionSummary.from_dict(obj["projection"]) if obj.get("projection") is not None else None,
            "opponent": ProjectionRecordOpponent.from_dict(obj["opponent"]) if obj.get("opponent") is not None else None,
            "usage": ProjectionRecordUsage.from_dict(obj["usage"]) if obj.get("usage") is not None else None
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


