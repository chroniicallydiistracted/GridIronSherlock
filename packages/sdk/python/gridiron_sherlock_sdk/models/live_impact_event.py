# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from gridiron_sherlock_sdk.models.live_impact_event_affected_players_inner import LiveImpactEventAffectedPlayersInner
from gridiron_sherlock_sdk.models.provenance import Provenance
from typing import Optional, Set
from typing_extensions import Self

class LiveImpactEvent(BaseModel):
    """
    LiveImpactEvent
    """ # noqa: E501
    event_id: StrictStr = Field(alias="eventId")
    game_id: StrictStr = Field(alias="gameId")
    play_id: StrictInt = Field(alias="playId")
    occurred_at: datetime = Field(alias="occurredAt")
    headline: StrictStr
    description: Optional[StrictStr] = None
    impact_type: StrictStr = Field(alias="impactType")
    affected_players: Optional[List[LiveImpactEventAffectedPlayersInner]] = Field(default=None, alias="affectedPlayers")
    fantasy_implications: List[StrictStr] = Field(alias="fantasyImplications")
    provenance: Optional[Provenance] = None
    links: Optional[List[StrictStr]] = None
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["eventId", "gameId", "playId", "occurredAt", "headline", "description", "impactType", "affectedPlayers", "fantasyImplications", "provenance", "links"]

    @field_validator('impact_type')
    def impact_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['touchdown', 'injury', 'drive', 'projection-update', 'status']):
            raise ValueError("must be one of enum values ('touchdown', 'injury', 'drive', 'projection-update', 'status')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LiveImpactEvent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in affected_players (list)
        _items = []
        if self.affected_players:
            for _item in self.affected_players:
                if _item:
                    _items.append(_item.to_dict())
            _dict['affectedPlayers'] = _items
        # override the default output from pydantic by calling `to_dict()` of provenance
        if self.provenance:
            _dict['provenance'] = self.provenance.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LiveImpactEvent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventId": obj.get("eventId"),
            "gameId": obj.get("gameId"),
            "playId": obj.get("playId"),
            "occurredAt": obj.get("occurredAt"),
            "headline": obj.get("headline"),
            "description": obj.get("description"),
            "impactType": obj.get("impactType"),
            "affectedPlayers": [LiveImpactEventAffectedPlayersInner.from_dict(_item) for _item in obj["affectedPlayers"]] if obj.get("affectedPlayers") is not None else None,
            "fantasyImplications": obj.get("fantasyImplications"),
            "provenance": Provenance.from_dict(obj["provenance"]) if obj.get("provenance") is not None else None,
            "links": obj.get("links")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


