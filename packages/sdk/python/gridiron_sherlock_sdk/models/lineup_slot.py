# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
from gridiron_sherlock_sdk.models.player_summary import PlayerSummary
from gridiron_sherlock_sdk.models.projection_summary import ProjectionSummary
from typing import Optional, Set
from typing_extensions import Self

class LineupSlot(BaseModel):
    """
    LineupSlot
    """ # noqa: E501
    slot: StrictStr
    player: PlayerSummary
    projected: ProjectionSummary
    status: Optional[StrictStr] = 'starting'
    actual_points: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="actualPoints")
    notes: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["slot", "player", "projected", "status", "actualPoints", "notes"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['starting', 'bench', 'locked', 'inactive']):
            raise ValueError("must be one of enum values ('starting', 'bench', 'locked', 'inactive')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of LineupSlot from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of player
        if self.player:
            _dict['player'] = self.player.to_dict()
        # override the default output from pydantic by calling `to_dict()` of projected
        if self.projected:
            _dict['projected'] = self.projected.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of LineupSlot from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "slot": obj.get("slot"),
            "player": PlayerSummary.from_dict(obj["player"]) if obj.get("player") is not None else None,
            "projected": ProjectionSummary.from_dict(obj["projected"]) if obj.get("projected") is not None else None,
            "status": obj.get("status") if obj.get("status") is not None else 'starting',
            "actualPoints": obj.get("actualPoints"),
            "notes": obj.get("notes")
        })
        return _obj


