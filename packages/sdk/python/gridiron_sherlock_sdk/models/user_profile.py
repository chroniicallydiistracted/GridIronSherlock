# coding: utf-8

"""
    GridIron Sherlock API

    Contracts for the GridIron Sherlock fantasy intelligence platform.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from gridiron_sherlock_sdk.models.linked_account import LinkedAccount
from gridiron_sherlock_sdk.models.user_profile_preferences import UserProfilePreferences
from typing import Optional, Set
from typing_extensions import Self

class UserProfile(BaseModel):
    """
    UserProfile
    """ # noqa: E501
    user_id: StrictStr = Field(description="Canonical UUID identifier.", alias="userId")
    email: StrictStr
    created_at: datetime = Field(alias="createdAt")
    display_name: Optional[StrictStr] = Field(default=None, alias="displayName")
    accounts: List[LinkedAccount]
    active_league_ids: List[StrictStr] = Field(alias="activeLeagueIds")
    preferences: Optional[UserProfilePreferences] = None
    feature_flags: Optional[List[StrictStr]] = Field(default=None, alias="featureFlags")
    additional_properties: Dict[str, Any] = {}
    __properties: ClassVar[List[str]] = ["userId", "email", "createdAt", "displayName", "accounts", "activeLeagueIds", "preferences", "featureFlags"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * Fields in `self.additional_properties` are added to the output dict.
        """
        excluded_fields: Set[str] = set([
            "additional_properties",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item in self.accounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['accounts'] = _items
        # override the default output from pydantic by calling `to_dict()` of preferences
        if self.preferences:
            _dict['preferences'] = self.preferences.to_dict()
        # puts key-value pairs in additional_properties in the top level
        if self.additional_properties is not None:
            for _key, _value in self.additional_properties.items():
                _dict[_key] = _value

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "userId": obj.get("userId"),
            "email": obj.get("email"),
            "createdAt": obj.get("createdAt"),
            "displayName": obj.get("displayName"),
            "accounts": [LinkedAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "activeLeagueIds": obj.get("activeLeagueIds"),
            "preferences": UserProfilePreferences.from_dict(obj["preferences"]) if obj.get("preferences") is not None else None,
            "featureFlags": obj.get("featureFlags")
        })
        # store additional fields in additional_properties
        for _key in obj.keys():
            if _key not in cls.__properties:
                _obj.additional_properties[_key] = obj.get(_key)

        return _obj


